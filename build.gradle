/*
 * Copyright (c) Contributors to the Eclipse Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0 
 */

/*
 * Master Gradle build script
 *
 * Depends on bndPlugin property set by settings.gradle.
 * and bnd_* values from gradle.properties.
 */

import aQute.lib.io.IO

/* Configure the subprojects */
subprojects {
	if (plugins.hasPlugin("biz.aQute.bnd")) {
		java { // OSGi build requires JDK 8
			toolchain {
				languageVersion = JavaLanguageVersion.of(11)
			}
		}
		if (bnd.is("companion.code")) {
			apply from: cnf.file("gradle/companion.gradle")
		}
		tasks.withType(JavaCompile).configureEach {
			options.compilerArgs.add("-Xlint:unchecked")
		}
		tasks.named("test") {
			useJUnitPlatform()
			testLogging {
				exceptionFormat = "full"
			}
			if (!logger.isInfoEnabled()) {
				def stdOut = [:]
				def stdErr = [:]
				onOutput { descriptor, event ->
					if (event.destination == TestOutputEvent.Destination.StdErr) {
						stdErr.get(descriptor, []).add(event)
					} else {
						stdOut.get(descriptor, []).add(event)
					}
				}
				afterTest { descriptor, result ->
					def stdErrEvents = stdErr.remove(descriptor)
					def stdOutEvents = stdOut.remove(descriptor)
					if (result.resultType == TestResult.ResultType.FAILURE) {
						if (stdErrEvents && !stdErrEvents.empty) {
							logger.lifecycle("\n{} > {} STANDARD_ERROR", descriptor.className, descriptor.name)
							stdErrEvents.each { event ->
								logger.lifecycle("    {}", event.message.trim())
							}
						}
						if (stdOutEvents && !stdOutEvents.empty) {
							logger.lifecycle("\n{} > {} STANDARD_OUT", descriptor.className, descriptor.name)
							stdOutEvents.each { event ->
								logger.lifecycle("    {}", event.message.trim())
							}
						}
					}
				}
			}
			if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
				jvmArgs("-XX:+ShowCodeDetailsInExceptionMessages")
			}
			systemProperty("org.slf4j.simpleLogger.defaultLogLevel", gradle.getStartParameter().getLogLevel().name())
			if (System.getProperty("maven.repo.local")) {
				systemProperty("maven.repo.local", IO.getFile(gradle.getStartParameter().getCurrentDir(), System.getProperty("maven.repo.local")))
			}
		}
	}
}

tasks.register("buildscriptDependencies") {
	doLast {
		println "bnd_version:   ${bnd_version}"
		println "bnd_snapshots: ${bnd_snapshots}"
		println "bnd_releases:  ${bnd_releases}"
	}
}
