/*
 * Copyright (c) Contributors to the Eclipse Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0 
 */

/*
 * OSGi companion code Gradle script
 */

def jar = tasks.named("jar") {
	def docsDirectory = objects.directoryProperty().value(layout.getBuildDirectory().dir(provider({-> project.docsDirName})))
	ext.javadocIncludes = docsDirectory.file("javadocIncludes.txt")
	ext.javadocVersion = docsDirectory.file("javadocVersion.txt")
	def projectName = project.getName()
	def bndProject = bnd.project

	outputs.file(javadocIncludes).withPropertyName("javadocIncludes")
	outputs.file(javadocVersion).withPropertyName("javadocVersion")

	doLast("javadoc-info") { t ->
		File javadocIncludesFile = javadocIncludes.get().getAsFile()
		javadocIncludesFile.text = bndProject.getExports().collect { packageRef, attrs ->
			"${packageRef.getBinary()}/*.java"
		}.join(",")
		File javadocVersionFile = javadocVersion.get().getAsFile()
		def version = bndProject.getVersion(projectName)
		javadocVersionFile.text = bnd.process("\${versionmask;===s;${version}}")
	}
}

def javadoc = tasks.named("javadoc") {
	inputs.files(jar).withPropertyName("jar")
	source(bnd.allSrcDirs)
	def javadocTitle = bnd.get("javadoc.title", project.getName())
	def copyrightHtml = bnd.get("copyright.html")
	configure(options) {
		bottom = "${copyrightHtml} Licensed under the <a href=\"https://www.eclipse.org/legal/efsl.php\" target=\"_blank\">Eclipse Foundation Specification License â€“ v1.0</a>"
		memberLevel = JavadocMemberLevel.PROTECTED
		charSet = "UTF-8"
		encoding = "UTF-8"
		docEncoding = "UTF-8"
		version = false
		use = true
		splitIndex = true
		author = false
		noDeprecated = false
		noDeprecatedList = false
		noIndex = false
		noNavBar = false
		noTree = false
		noTimestamp = JavaVersion.current().isJava9Compatible()
		tags = [
			"Immutable:t:\"Immutable\"",
			"ThreadSafe:t:\"ThreadSafe\"",
			"NotThreadSafe:t:\"NotThreadSafe\"",
			"GuardedBy:mf:\"Guarded By:\"",
			"security:m:\"Required Permissions\"",
			"noimplement:t:\"Consumers of this API must not implement this interface\""
		]
		links("https://docs.oracle.com/javase/8/docs/api/")
	}
	// compute dependencies on other javadoc builds based upon the classpath
	def pattern = project.getName().startsWith("osgi.") ? ~/^(osgi\.([^\/]*))/ : ~/^(org\.osgi\.([^\/]*))/
	def linkProjects = sourceSets.main.compileClasspath.findResults {
		def entry = parent.relativePath(it).replace(File.separatorChar, (char)'/')
		def matcher = pattern.matcher(entry)
		matcher ? parent.project(matcher[0][1]) : null
	}
	linkProjects.each { linkProject ->
		dependsOn(linkProject.absoluteProjectPath("javadoc"))
	}
	/* Turn off javadoc 8 overly pedantic lint checking */
	if (JavaVersion.current().isJava8Compatible()) {
		options.addStringOption("Xdoclint:none", "-quiet")
	}
	doFirst("configuration") { t ->
		def osgiRelease = bnd.get("osgi.release")
		File javadocVersion = jar.flatMap({it.javadocVersion}).get().getAsFile()
		File javadocIncludes = jar.flatMap({it.javadocIncludes}).get().getAsFile()
		def javadocTitleVersion = project.getName().startsWith("osgi.") ? "Release ${osgiRelease}" : "Version ${javadocVersion.text}"
		options.docTitle = "OSGi&reg; ${javadocTitle} ${javadocTitleVersion}"
		options.windowTitle = "OSGi ${javadocTitle} ${javadocTitleVersion}"
		options.header = "<b>OSGi&reg; ${javadocTitle}</b><br/>${javadocTitleVersion}"
		include javadocIncludes.text.tokenize(",")
		linkProjects.each { linkProject ->
			File linkJavadocVersion = linkProject.tasks.named("jar").flatMap({it.javadocVersion}).get().getAsFile()
			File linkDestinationDir = linkProject.tasks.named("javadoc").map({it.destinationDir}).get()
			options.linksOffline("../../${linkProject.getName()}/${linkJavadocVersion.text}", linkDestinationDir.absolutePath)
		}
		logger.info("Title         : {}", options.windowTitle)
		logger.info("Packages      : {}", includes)
		logger.info("Destdir       : {}", destinationDir)
	}
}

tasks.named("release") {
	dependsOn(javadoc)
}
