<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->

<chapter label="101"
         revision="$Id$"
         version="5.0" xml:id="service.log"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Log Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.log-version"
    linkend="org.osgi.service.log"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para xml:id="i1492311">The Log Service provides a general purpose message
    logger for the OSGi framework. It consists of several services: a service
    for obtaining Loggers to log information and other services for retrieving
    current or previously recorded log information.</para>

    <para>This specification defines the methods and semantics of interfaces
    which bundle developers can use to log entries and to retrieve log
    entries.</para>

    <para xml:id="i1294527">Bundles can use the Logger Factory to log
    information for the Operator. Other bundles, oriented toward management of
    the environment, can use the <xref linkend="service.log-log.stream.ref"/>
    or Log Reader Service to retrieve Log Entry objects that were recorded
    recently or to receive Log Entry objects as they are logged by other
    bundles.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Logger</emphasis> - An interface that allows a
          bundle to log information, including a message, a level, an
          exception, and a <code>ServiceReference</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>LoggerFactory</emphasis> - The service interface
          that allows a bundle to obtain a Logger. A Logger is named and
          associated with a <code>Bundle</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogService</emphasis> - The legacy service interface
          that allows a bundle to log information, including a message, a
          level, an exception, a <code>ServiceReference</code> object, and a
          <code>Bundle</code> object. The methods of this service are
          deprecated and it is recommended to use LoggerFactory and Loggers
          instead.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogEntry</emphasis> - An interface that allows
          access to a log entry in the log. It includes all the information
          that can be logged through the Logger as well as a time stamp, a
          sequence number, thread information, and location
          information.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogReaderService</emphasis> - A service interface
          that allows access to a list of recent <code>LogEntry</code>
          objects, and allows the registration of a <code>LogListener</code>
          object that receives <code>LogEntry</code> objects as they are
          created.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogListener</emphasis> - The interface for the
          listener to <code>LogEntry</code> objects. Must be registered with
          the Log Reader Service.</para>
        </listitem>

        <listitem>
          <para><emphasis>LoggerContext</emphasis> - An interface that allows
          the configuration of effective logging levels for a Bundle. The
          configuration can be set in Configuration Admin and via method
          calls.</para>
        </listitem>

        <listitem>
          <para><emphasis>LoggerAdmin</emphasis> - A service interface that
          allows for the configuration of logging. The service provides access
          to Logger Context objects.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>The Logger Interface</title>

    <para>The <xref linkend="org.osgi.service.log.Logger"
    xrefstyle="hyperlink"/> interface allows bundle developers to log messages
    that can be distributed to other bundles, which in turn can forward the
    logged entries to a file system, remote system, or some other destination.
    It is inspired by the ideas used in <xref
    linkend="service.log-slf4j.ref"/>.</para>

    <figure pgwide="1">
      <title>Logger Class Diagram org.osgi.service.log package</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="4.000in"
                     contentwidth="5.000in" fileref="logservice-classes.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The <code>Logger</code> interface allows the bundle developer
    to:</para>

    <itemizedlist xml:id="i1294532">
      <listitem>
        <para>Specify a message, message parameters, and an exception to be
        logged.</para>
      </listitem>

      <listitem xml:id="i1294533">
        <para>Define the log level representing the severity of the message
        being logged. If the effective log level for the Logger does not imply
        the requested log level, then the logging request is ignored. See
        <xref linkend="service.log-effective.log.level"/>.</para>
      </listitem>

      <listitem>
        <para>Specify the Service associated with the message being
        logged.</para>
      </listitem>

      <listitem>
        <para>Query if a log level is effective.</para>
      </listitem>
    </itemizedlist>

    <para xml:id="i1294534">By obtaining a <xref
    linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> object from
    the <xref linkend="org.osgi.service.log.LoggerFactory"
    xrefstyle="hyperlink"/> service, a bundle can start logging messages to
    the Log Service by calling one of the <xref
    linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/>
    methods.</para>

    <para>The <xref linkend="org.osgi.service.log.Logger"
    xrefstyle="hyperlink"/> interface defines several methods for each of the
    defined <xref linkend="org.osgi.service.log.LogLevel"
    xrefstyle="hyperlink"/>s.</para>

    <table>
      <title>Log Levels</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1.2*"/>

        <colspec colnum="2" colwidth="5*"/>

        <thead>
          <row>
            <entry>Log Level</entry>

            <entry>Descriptions</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><xref linkend="org.osgi.service.log.LogLevel.AUDIT"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para>This log level is used for information that must
            always be logged.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.service.log.LogLevel.ERROR"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para>This log level is used for information about an error
            situation.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.service.log.LogLevel.WARN"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para>This log level is used for information about a
            failure or unwanted situation that is not blocking.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.service.log.LogLevel.INFO"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para>This log level is used for information about normal
            operation.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.service.log.LogLevel.DEBUG"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para>This log level is used for detailed output for
            debugging operations.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.service.log.LogLevel.TRACE"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para>This log level is used for large volume of output for
            tracing operations.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para xml:id="i1294535">Many of the <code>Logger</code> methods take a
    message format string and message parameters which are formatted together
    to create the log message. In the format string, use a left curly bracket
    (<code>'{' \u007B</code>) followed by a right curly bracket (<code>'}'
    \u007D</code>) as a place holder for a message parameter:
    <code>"{}"</code>. If you need to use the literal <code>"{}"</code> in the
    formatted message, precede the place holder with a reverse solidus
    (<code>'\' \u005C</code>): <code>"\\{}"</code>. If you need to place a
    backslash before the place holder, precede the reverse solidus with a
    reverse solidus: <code>"\\\\{}"</code>.</para>

    <para>You can also add a Throwable and/or ServiceReference to the
    generated <xref linkend="org.osgi.service.log.LogEntry"
    xrefstyle="hyperlink"/> by passing them to the logging methods as
    additional arguments to the <code>Logger</code> method. If the last
    argument is a Throwable or a ServiceReference, it is added to the
    generated <xref linkend="org.osgi.service.log.LogEntry"
    xrefstyle="hyperlink"/> and then, if the next to last argument is a
    ServiceReference or Throwable and not the same type as the last argument,
    it is also added to the generated <xref
    linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/>. These
    arguments will not be used as message parameters. For example:</para>

    <programlisting>logger.info("Found service {}.", serviceReference, serviceReference);
logger.warn("Something named {} happened.", name, serviceReference, throwable);
logger.error("Failed.", exception);</programlisting>

    <para>The following example code records error conditions as log
    messages.</para>

    <programlisting>try (InputStream in = Files.newInputStream(myFile)) {
    int b;
    while ((b = in.read()) != -1 ) {
      ...
    }
} catch (IOException e) {
    logger.error("Cannot access file {}", myFile, e);
}</programlisting>

    <para xml:id="i1294536">Notice that in addition to the error message, the
    exception itself is also logged. Providing this information can
    significantly simplify problem determination by the Operator.</para>

    <para>Sometimes message parameters can be expensive to compute, so
    avoiding computation is important if the log level is not effective. This
    can be done using either an <code>if</code> block or a <xref
    linkend="org.osgi.service.log.LoggerConsumer" xrefstyle="hyperlink"/>. The
    latter is convenient as a lambda expression. For example, both of the
    following examples avoid computation if the log level is not
    effective.</para>

    <programlisting>if (logger.isInfoEnabled()) {
    logger.info("Max {}", Collections.max(processing));
}</programlisting>

    <programlisting>logger.info(l -&gt; l.info("Max {}", Collections.max(processing)));</programlisting>

    <para>The latter example only calls the lambda expression if the log level
    is effective.</para>
  </section>

  <section>
    <title>Obtaining a Logger</title>

    <para><xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/>
    objects can be obtained from the <xref
    linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/>
    service. Loggers are named. Logger names should be in the form of a fully
    qualified Java class names with segments separated by full stop (<code>'.'
    \u002E</code>). For example:</para>

    <programlisting>com.foo.Bar</programlisting>

    <para>Logger names form a hierarchy. A logger name is said to be an
    ancestor of another logger name if the logger name followed by a full stop
    ('.' \u002E) is a prefix of the descendant logger name. The root logger
    name (<xref linkend="org.osgi.service.log.Logger.ROOT_LOGGER_NAME"
    xrefstyle="hyperlink"/>) is the top ancestor of the logger name hierarchy.
    For example:</para>

    <programlisting>com.foo.Bar
com.foo
com
ROOT</programlisting>

    <para>Normally the name of the class which is doing the logging is used as
    the logger name. There are Logger Factory methods which take
    <code>Class</code> objects to simplify this.</para>

    <programlisting>Logger logger = loggerFactory.getLogger(Bar.class);</programlisting>

    <para>The <xref linkend="org.osgi.service.log.LoggerFactory"
    xrefstyle="hyperlink"/> service can be used to obtain two types of Logger
    objects: <xref linkend="org.osgi.service.log.Logger"
    xrefstyle="hyperlink"/> and <xref
    linkend="org.osgi.service.log.FormatterLogger" xrefstyle="hyperlink"/>.
    The <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/>
    object uses SLF4J-style (<code>"{}"</code>) place holders for message
    formatting. The <xref linkend="org.osgi.service.log.FormatterLogger"
    xrefstyle="hyperlink"/> object use printf-style place holders from
    <code>java.util.Formatter</code> for message formatting.</para>

    <programlisting>FormatterLogger logger = loggerFactory.getLogger(Bar.class,
  FormatterLogger.class);
logger.error("Cannot access file %s", myFile);</programlisting>

    <para>Some bundles, such as the Service Component Runtime implementation,
    may need to log on behalf of other bundles. The <xref
    linkend="org.osgi.service.log.LoggerFactory.getLogger-Bundle-String-Class-"
    xrefstyle="hyperlink"/> method can be used to obtain a <xref
    linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> object
    associated with the specified bundle.</para>

    <programlisting>Logger logger = loggerFactory.getLogger(componentBundle,
  componentImplClassName,
  Logger.class);</programlisting>

    <para>As long as the <xref linkend="org.osgi.service.log.LoggerFactory"
    xrefstyle="hyperlink"/> service, from which the <xref
    linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> is obtained,
    is active, that is, the <xref linkend="org.osgi.service.log.LoggerFactory"
    xrefstyle="hyperlink"/> service has not been unregistered, then the <xref
    linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> is valid and
    can be used to log. However, once the <xref
    linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/>
    service has been unregistered, then <xref
    linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> objects
    obtained from the <xref linkend="org.osgi.service.log.LoggerFactory"
    xrefstyle="hyperlink"/> service must enter a "no-op" state where no log
    level is effective and no logging occurs.</para>
  </section>

  <section>
    <title>Logger Configuration</title>

    <para>A Logger Admin service is defined which allows for the configuration
    of Loggers.</para>

    <figure pgwide="1">
      <title>Log Admin Class Diagram org.osgi.service.log.admin
      package</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="4.000in"
                     contentwidth="5.000in" fileref="logadmin-classes.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The <xref linkend="org.osgi.service.log.admin.LoggerAdmin"
    xrefstyle="hyperlink"/> service can be used to obtain the <xref
    linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    for a bundle. Each bundle may have its own named <xref
    linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    based upon its bundle symbolic name, bundle version, and bundle location.
    There is also a <emphasis>root</emphasis> <xref
    linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    from which all named <xref
    linkend="org.osgi.service.log.admin.LoggerContext"
    xrefstyle="hyperlink"/>s inherit. The root <xref
    linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    has no name.</para>

    <para>The <xref linkend="org.osgi.service.log.admin.LoggerAdmin"
    xrefstyle="hyperlink"/> service is associated with the <xref
    linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/>
    service it administrates via the <xref
    linkend="org.osgi.service.log.admin.LoggerAdmin.LOG_SERVICE_ID"
    xrefstyle="hyperlink"/> service property whose value is a Long containing
    the service.id of the <xref linkend="org.osgi.service.log.LoggerFactory"
    xrefstyle="hyperlink"/> service.</para>

    <para>A <xref linkend="org.osgi.service.log.Logger"
    xrefstyle="hyperlink"/> implementation must locate the <xref
    linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    for the bundle to determine the effective log level of the <xref
    linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> when a log
    method is called. See <xref linkend="service.log-effective.log.level"/>.
    The best matching name for the <xref
    linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    is the longest name, which has a non-empty <xref
    linkend="org.osgi.service.log.admin.LoggerContext"
    xrefstyle="hyperlink"/>, according to the following syntax:</para>

    <programlisting>name ::= symbolic-name ( ’|’ version ( ’|’ location )? )?</programlisting>

    <para>The version must be formatted canonically, that is, according to the
    <code>toString()</code> method of the <code>Version</code> class. So the
    <xref linkend="org.osgi.service.log.admin.LoggerContext"
    xrefstyle="hyperlink"/> for a bundle is searched for using the following
    names in the given order:</para>

    <programlisting>&lt;symbolic-name&gt;|&lt;version&gt;|&lt;location&gt;
&lt;symbolic-name&gt;|&lt;version&gt;
&lt;symbolic-name&gt;</programlisting>

    <para>The search stops at the first non-empty <xref
    linkend="org.osgi.service.log.admin.LoggerContext"
    xrefstyle="hyperlink"/>. If no non-empty <xref
    linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    is found using the above search order, the <xref
    linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    with the symbolic name of the bundle must be used.</para>

    <para>This allows a bundle to have no <xref
    linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    configured. In this case it will use the root <xref
    linkend="org.osgi.service.log.admin.LoggerContext"
    xrefstyle="hyperlink"/>'s configuration. It also allows a bundle to be
    configured based upon bundle symbolic name, bundle symbolic name and
    bundle version or even bundle symbolic name, bundle version, and bundle
    location. The latter forms may be of interest if there are multiple
    versions of a bundle installed.</para>

    <para><xref linkend="org.osgi.service.log.admin.LoggerContext"
    xrefstyle="hyperlink"/>s can be configured using the <xref
    linkend="org.osgi.service.log.admin.LoggerContext.getLogLevels--"
    xrefstyle="hyperlink"/> and <xref
    linkend="org.osgi.service.log.admin.LoggerContext.setLogLevels-Map-"
    xrefstyle="hyperlink"/> methods of the <xref
    linkend="org.osgi.service.log.admin.LoggerContext"
    xrefstyle="hyperlink"/>. Logger names, including the root logger name
    (<xref linkend="org.osgi.service.log.Logger.ROOT_LOGGER_NAME"
    xrefstyle="hyperlink"/>), can be configured to a specific log
    level.</para>

    <para>Any change to the configuration of a <xref
    linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    must be effective immediately for all loggers that would rely upon the
    configuration of the <xref
    linkend="org.osgi.service.log.admin.LoggerContext"
    xrefstyle="hyperlink"/>. Changes to the configuration of a <xref
    linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    via the <xref
    linkend="org.osgi.service.log.admin.LoggerContext.setLogLevels-Map-"
    xrefstyle="hyperlink"/> method are not persisted.</para>

    <section>
      <title>Configuration Admin Integration</title>

      <para>The configured log levels for a <xref
      linkend="org.osgi.service.log.admin.LoggerContext"
      xrefstyle="hyperlink"/> can be set by both the <xref
      linkend="org.osgi.service.log.admin.LoggerContext.setLogLevels-Map-"
      xrefstyle="hyperlink"/> method and by configuration information in
      Configuration Admin, if Configuration Admin is present. The configured
      log levels for a <xref
      linkend="org.osgi.service.log.admin.LoggerContext"
      xrefstyle="hyperlink"/> are based upon the last technique used to update
      the configured log levels.</para>

      <para>If Configuration Admin is present, <xref
      linkend="org.osgi.service.log.admin.LoggerContext"
      xrefstyle="hyperlink"/> configuration information in Configuration Admin
      must be used. This allows external <xref
      linkend="org.osgi.service.log.admin.LoggerContext"
      xrefstyle="hyperlink"/> configuration such as via <xref
      linkend="service.log-configurator.ref"/>. The name of the <xref
      linkend="org.osgi.service.log.admin.LoggerContext"
      xrefstyle="hyperlink"/> is mapped to a Configuration Admin targeted PID
      as follows:</para>

      <itemizedlist>
        <listitem>
          <para>The root <xref
          linkend="org.osgi.service.log.admin.LoggerContext"
          xrefstyle="hyperlink"/>, which has no name, is mapped to the PID
          <xref
          linkend="org.osgi.service.log.admin.LoggerContext.LOGGER_CONTEXT_PID"
          xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>A named <xref
          linkend="org.osgi.service.log.admin.LoggerContext"
          xrefstyle="hyperlink"/> is mapped to a targeted PID by prefixing the
          <xref linkend="org.osgi.service.log.admin.LoggerContext"
          xrefstyle="hyperlink"/>'s name with <xref
          linkend="org.osgi.service.log.admin.LoggerContext.LOGGER_CONTEXT_PID"
          xrefstyle="hyperlink"/> followed by vertical line (<code>'|'
          \u007c</code>). For example, the <xref
          linkend="org.osgi.service.log.admin.LoggerContext"
          xrefstyle="hyperlink"/> named <code>com.foo.bar</code> is mapped to
          the targeted PID
          <code>org.osgi.service.log.admin|com.foo.bar</code>.</para>
        </listitem>
      </itemizedlist>

      <para>In the Configuration for the targeted PID, the dictionary keys are
      <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/>
      names having a key type of <code>String</code>, and the values are the
      names of the <xref linkend="org.osgi.service.log.LogLevel"
      xrefstyle="hyperlink"/> values having a value type of
      <code>String</code>. If the Configuration contains any key/value pairs
      whose value is not the name of a <xref
      linkend="org.osgi.service.log.LogLevel" xrefstyle="hyperlink"/> value,
      that key/value pair must be ignored when setting the configuration into
      the <xref linkend="org.osgi.service.log.admin.LoggerContext"
      xrefstyle="hyperlink"/>.</para>

      <para>Any change to the Configuration for a <xref
      linkend="org.osgi.service.log.admin.LoggerContext"
      xrefstyle="hyperlink"/> must be set into the <xref
      linkend="org.osgi.service.log.admin.LoggerContext"
      xrefstyle="hyperlink"/> as soon as possible. Since notification of
      Configuration changes happen asynchronously, it may take a brief period
      of time before Configuration changes can be made effective.</para>

      <para>This section is not meant to require that a Log Service
      implementation must require Configuration Admin. But if Configuration
      Admin is present, the Configurations must be used to set the log levels
      in the mapped <xref linkend="org.osgi.service.log.admin.LoggerContext"
      xrefstyle="hyperlink"/>s.</para>
    </section>

    <section xml:id="service.log-effective.log.level">
      <title>Effective Log Level</title>

      <para>Once the <xref linkend="org.osgi.service.log.admin.LoggerContext"
      xrefstyle="hyperlink"/> for the logging bundle is determined, the
      effective log level for the <xref linkend="org.osgi.service.log.Logger"
      xrefstyle="hyperlink"/> is found using the <xref
      linkend="org.osgi.service.log.admin.LoggerContext.getEffectiveLogLevel-String-"
      xrefstyle="hyperlink"/> method:</para>

      <orderedlist>
        <listitem>
          <para>If the logger name is configured with a log level, return the
          configured log level.</para>
        </listitem>

        <listitem>
          <para>For each ancestor logger name of the logger name, if the
          ancestor logger name is configured with a log level, return the
          configured log level.</para>
        </listitem>

        <listitem>
          <para>If the <xref
          linkend="org.osgi.service.log.admin.LoggerContext"
          xrefstyle="hyperlink"/> is named, return the result of calling the
          <xref
          linkend="org.osgi.service.log.admin.LoggerContext.getEffectiveLogLevel-String-"
          xrefstyle="hyperlink"/> method on the root <xref
          linkend="org.osgi.service.log.admin.LoggerContext"
          xrefstyle="hyperlink"/> with the logger name.</para>
        </listitem>

        <listitem>
          <para>If the <xref
          linkend="org.osgi.service.log.admin.LoggerContext"
          xrefstyle="hyperlink"/> is the root Logger Context, return the
          default log level for the root <xref
          linkend="org.osgi.service.log.admin.LoggerContext"
          xrefstyle="hyperlink"/>.</para>
        </listitem>
      </orderedlist>

      <para>The default log level for the root <xref
      linkend="org.osgi.service.log.admin.LoggerContext"
      xrefstyle="hyperlink"/> can be set by the framework launch property
      <xref
      linkend="org.osgi.service.log.admin.LoggerContext.LOGGER_CONTEXT_DEFAULT_LOGLEVEL"
      xrefstyle="hyperlink"/>. The value of this property must be the name of
      the one of the <xref linkend="org.osgi.service.log.LogLevel"
      xrefstyle="hyperlink"/> values. If not specified, or the specified value
      is not the name of the one of the <xref
      linkend="org.osgi.service.log.LogLevel" xrefstyle="hyperlink"/> values,
      the default log level of the root <xref
      linkend="org.osgi.service.log.admin.LoggerContext"
      xrefstyle="hyperlink"/> is <xref
      linkend="org.osgi.service.log.LogLevel.WARN"
      xrefstyle="hyperlink"/>.</para>
    </section>
  </section>

  <section xml:id="i1210758">
    <title>Log Reader Service</title>

    <para>The Log Reader Service maintains a list of <xref
    linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> objects
    called the <emphasis>log</emphasis>. The Log Reader Service is a service
    that bundle developers can use to retrieve information contained in this
    log, and receive notifications about <xref
    linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> objects
    when they are created through the Log Service.</para>

    <para>The size of the log is implementation-specific, and it determines
    how far into the past the log entries go.</para>

    <para>The <xref linkend="org.osgi.service.log.LogReaderService"
    xrefstyle="hyperlink"/> interface defines the following methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.log.LogReaderService.getLog--"
        xrefstyle="hyperlink"/> - This method retrieves past log entries as an
        enumeration with the most recent entry first.</para>
      </listitem>

      <listitem>
        <para><xref
        linkend="org.osgi.service.log.LogReaderService.addLogListener-LogListener-"
        xrefstyle="hyperlink"/> - This method is used to subscribe to the Log
        Reader Service in order to receive log messages as they occur. Unlike
        the previously recorded log entries, all log messages must be sent to
        subscribers of the Log Reader Service as they are recorded.</para>

        <para>After a subscription to the Log Reader Service has been started,
        the subscriber's <xref
        linkend="org.osgi.service.log.LogListener.logged-LogEntry-"
        xrefstyle="hyperlink"/> method must be called with a <xref
        linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> object
        for the message each time a message is logged.</para>
      </listitem>

      <listitem>
        <para><xref
        linkend="org.osgi.service.log.LogReaderService.removeLogListener-LogListener-"
        xrefstyle="hyperlink"/> - This method is used to unsubscribe the <xref
        linkend="org.osgi.service.log.LogListener" xrefstyle="hyperlink"/>
        from the Log Reader Service.</para>
      </listitem>
    </itemizedlist>

    <para>The <xref linkend="org.osgi.service.log.LogListener"
    xrefstyle="hyperlink"/> interface defines the following method:</para>

    <itemizedlist>
      <listitem>
        <para><xref
        linkend="org.osgi.service.log.LogListener.logged-LogEntry-"
        xrefstyle="hyperlink"/> - This method is called for each <xref
        linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> object
        created.</para>
      </listitem>
    </itemizedlist>

    <para>The delivery of <xref linkend="org.osgi.service.log.LogEntry"
    xrefstyle="hyperlink"/> objects to the <xref
    linkend="org.osgi.service.log.LogListener" xrefstyle="hyperlink"/> object
    should be done asynchronously.</para>
  </section>

  <section xml:id="i1231250">
    <title>Log Entry Interface</title>

    <para>The <xref linkend="org.osgi.service.log.LogEntry"
    xrefstyle="hyperlink"/> interface abstracts a log entry. It is a record of
    the information that was passed when an event was logged as well as
    information captured at the time the event was logged. The <xref
    linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> interface
    defines these methods to retrieve this information.</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getBundle--"
        xrefstyle="hyperlink"/> - This method returns the Bundle object
        associated with the <xref linkend="org.osgi.service.log.Logger"
        xrefstyle="hyperlink"/> used to create the log entry.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getException--"
        xrefstyle="hyperlink"/> - This method returns the logged exception, if
        any. In some implementations, the returned exception may not be the
        original exception object. To avoid references to a bundle-defined
        exception class, thus preventing an uninstalled bundle from being
        garbage collected, the Log Service may return an exception object of
        an implementation defined Throwable subclass. This object will attempt
        to return as much information as possible, such as the message and
        stack trace, from the original exception object .</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getLoggerName--"
        xrefstyle="hyperlink"/> - This name of the <xref
        linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> used to
        create the log entry.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getLogLevel--"
        xrefstyle="hyperlink"/> - This method returns the <xref
        linkend="org.osgi.service.log.LogLevel"
        xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getMessage--"
        xrefstyle="hyperlink"/> - This method returns the formatted
        message.</para>
      </listitem>

      <listitem>
        <para><xref
        linkend="org.osgi.service.log.LogEntry.getServiceReference--"
        xrefstyle="hyperlink"/> - This method returns the logged
        <code>ServiceReference</code>, if any.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getTime--"
        xrefstyle="hyperlink"/> - This method returns the time that the log
        entry was created.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getSequence--"
        xrefstyle="hyperlink"/> - This method returns a sequence number which
        increases for each created log entry.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getThreadInfo--"
        xrefstyle="hyperlink"/> - This method returns information about the
        thread that created the log entry.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getLocation--"
        xrefstyle="hyperlink"/> - This method returns a
        <code>StackTraceElement</code> about the caller that created the log
        entry.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="service.log-mapping.events">
    <title>Mapping of Events</title>

    <para>Implementations of a Log Service must log Framework-generated events
    and map the information to <xref linkend="org.osgi.service.log.LogEntry"
    xrefstyle="hyperlink"/> objects in a consistent way. Framework events must
    be treated exactly the same as other logged events and distributed to all
    <xref linkend="org.osgi.service.log.LogListener" xrefstyle="hyperlink"/>
    objects that are associated with the Log Reader Service. Additionally, if
    the Event Admin service is present, implementations of a Log Service must
    map <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/>
    objects to events in Event Admin. The following sections define these
    mappings.</para>

    <section>
      <title>Bundle Events Mapping</title>

      <para>A Bundle Event is mapped to a <xref
      linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> object
      according to the following table.</para>

      <table xml:id="service.log-table.bundle.event.log.entries">
        <title>Mapping of Bundle Events to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Bundle Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getLoggerName--"
              xrefstyle="hyperlink"/></entry>

              <entry><para>The logger name
              <code>"Events.Bundle.&lt;bsn&gt;"</code> where
              <code>&lt;bsn&gt;</code> is the Bundle Symbolic Name of the
              bundle identified by <xref
              linkend="org.osgi.service.log.LogEntry.getBundle--"
              xrefstyle="hyperlink"/>. If <xref
              linkend="org.osgi.service.log.LogEntry.getBundle--"
              xrefstyle="hyperlink"/> return <code>null</code>, then the
              logger name is <code>"Events.Bundle"</code>.</para></entry>
            </row>

            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getLogLevel--"
              xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.log.LogLevel.INFO"
              xrefstyle="hyperlink"/></para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getBundle--"
              xrefstyle="hyperlink"/></entry>

              <entry><para>Identifies the bundle to which the event happened.
              In other words, it identifies the bundle that was installed,
              started, stopped, updated, or uninstalled. This identification
              is obtained by calling <code>getBundle()</code> on the
              <code>BundleEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getException--"
              xrefstyle="hyperlink"/></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getServiceReference--"
              xrefstyle="hyperlink"/></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getMessage--"
              xrefstyle="hyperlink"/></entry>

              <entry><para>The message depends on the event
              type:</para><itemizedlist>
                  <listitem>
                    <para><code>INSTALLED</code> - "BundleEvent
                    INSTALLED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STARTED</code> - "BundleEvent STARTED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STOPPED</code> - "BundleEvent STOPPED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UPDATED</code> - "BundleEvent UPDATED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNINSTALLED</code> - "BundleEvent
                    UNINSTALLED"</para>
                  </listitem>

                  <listitem>
                    <para><code>RESOLVED</code> - "BundleEvent
                    RESOLVED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNRESOLVED</code> - "BundleEvent
                    UNRESOLVED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STARTING</code> - "BundleEvent
                    STARTING"</para>
                  </listitem>

                  <listitem>
                    <para><code>STOPPING</code> - "BundleEvent
                    STOPPING"</para>
                  </listitem>

                  <listitem>
                    <para><code>LAZY_ACTIVATION</code> - "BundleEvent
                    LAZY_ACTIVATION"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Service Events Mapping</title>

      <para>A Service Event is mapped to a <code>LogEntry</code> object
      according to the following table.</para>

      <table>
        <title>Mapping of Service Events to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Service Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getLoggerName--"
              xrefstyle="hyperlink"/></entry>

              <entry><para>The logger name
              <code>"Events.Service.&lt;bsn&gt;"</code> where
              <code>&lt;bsn&gt;</code> is the Bundle Symbolic Name of the
              bundle identified by <xref
              linkend="org.osgi.service.log.LogEntry.getBundle--"
              xrefstyle="hyperlink"/>. If <xref
              linkend="org.osgi.service.log.LogEntry.getBundle--"
              xrefstyle="hyperlink"/> return <code>null</code>, then the
              logger name is <code>"Events.Service"</code>.</para></entry>
            </row>

            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getLogLevel--"
              xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.log.LogLevel.INFO"
              xrefstyle="hyperlink"/>, except for
              <code>ServiceEvent.MODIFIED</code> events.
              <code>ServiceEvent.MODIFIED</code> events can happen frequently
              and contains relatively little information. They must be logged
              with a level of <xref
              linkend="org.osgi.service.log.LogLevel.DEBUG"
              xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getBundle--"
              xrefstyle="hyperlink"/></entry>

              <entry><para>Identifies the bundle that registered the service
              associated with this event. It is obtained by calling
              <code>getServiceReference().getBundle()</code> on the
              <code>ServiceEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getException--"
              xrefstyle="hyperlink"/></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getServiceReference--"
              xrefstyle="hyperlink"/></entry>

              <entry><para>Identifies a reference to the service associated
              with the event. It is obtained by calling
              <code>getServiceReference()</code> on the
              <code>ServiceEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getMessage--"
              xrefstyle="hyperlink"/></entry>

              <entry><para>This message depends on the actual event type. The
              messages are mapped as follows:</para><itemizedlist>
                  <listitem>
                    <para><code>REGISTERED</code> - "ServiceEvent
                    REGISTERED"</para>
                  </listitem>

                  <listitem>
                    <para><code>MODIFIED</code> - "ServiceEvent
                    MODIFIED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNREGISTERING</code> - "ServiceEvent
                    UNREGISTERING"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Framework Events Mapping</title>

      <para>A Framework Event is mapped to a LogEntry object according to the
      following table.</para>

      <table>
        <title>Mapping of Framework Event to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Framework Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getLoggerName--"
              xrefstyle="hyperlink"/></entry>

              <entry><para>The logger name
              <code>"Events.Framework.&lt;bsn&gt;"</code> where
              <code>&lt;bsn&gt;</code> is the Bundle Symbolic Name of the
              bundle identified by <xref
              linkend="org.osgi.service.log.LogEntry.getBundle--"
              xrefstyle="hyperlink"/>. If <xref
              linkend="org.osgi.service.log.LogEntry.getBundle--"
              xrefstyle="hyperlink"/> return <code>null</code>, then the
              logger name is <code>"Events.Framework"</code>.</para></entry>
            </row>

            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getLogLevel--"
              xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.log.LogLevel.INFO"
              xrefstyle="hyperlink"/>, except for
              <code>FrameworkEvent.ERROR</code> events and
              <code>FrameworkEvent.WARNING</code> events. A
              <code>FrameworkEvent.ERROR</code> event represents an error and
              is logged with a level of <xref
              linkend="org.osgi.service.log.LogLevel.ERROR"
              xrefstyle="hyperlink"/> and a
              <code>FrameworkEvent.WARNING</code> event represents a warning
              and is logged with a level of <xref
              linkend="org.osgi.service.log.LogLevel.WARN"
              xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getBundle--"
              xrefstyle="hyperlink"/></entry>

              <entry><para>Identifies the bundle associated with the event.
              This may be the system bundle. It is obtained by calling
              <code>getBundle()</code> on the <code>FrameworkEvent</code>
              object.</para></entry>
            </row>

            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getException--"
              xrefstyle="hyperlink"/></entry>

              <entry><para>Identifies the exception associated with the error.
              This will be null for event types other than
              <code>FrameworkEvent.ERROR</code>. It is obtained by calling
              <code>getThrowable()</code> on the <code>FrameworkEvent</code>
              object.</para></entry>
            </row>

            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getServiceReference--"
              xrefstyle="hyperlink"/></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><xref
              linkend="org.osgi.service.log.LogEntry.getMessage--"
              xrefstyle="hyperlink"/></entry>

              <entry><para>This message depends on the actual event type. The
              messages are mapped as follows:</para><itemizedlist>
                  <listitem>
                    <para><code>STARTED</code> - "FrameworkEvent
                    STARTED"</para>
                  </listitem>

                  <listitem>
                    <para><code>ERROR</code> - "FrameworkEvent ERROR"</para>
                  </listitem>

                  <listitem>
                    <para><code>PACKAGES_REFRESHED</code> - "FrameworkEvent
                    PACKAGES REFRESHED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STARTLEVEL_CHANGED</code> - "FrameworkEvent
                    STARTLEVEL CHANGED"</para>
                  </listitem>

                  <listitem>
                    <para><code>WARNING</code> - "FrameworkEvent
                    WARNING"</para>
                  </listitem>

                  <listitem>
                    <para><code>INFO</code> - "FrameworkEvent INFO"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i1479168">
      <title>Log Events</title>

      <para>Log entries must be mapped into events by the Log Service
      implementation and delivered asynchronously to the Event Admin service
      (if present). The following event topics are used based upon the log
      level of the log entry:</para>

      <table>
        <title>Event Topics</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <thead>
            <row>
              <entry>Event Topic</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para><code>org/osgi/service/log/LogEntry/LOG_AUDIT</code></para></entry>

              <entry><para>When the log level is <xref
              linkend="org.osgi.service.log.LogLevel.AUDIT"
              xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org/osgi/service/log/LogEntry/LOG_ERROR</code></para></entry>

              <entry><para>When the log level is <xref
              linkend="org.osgi.service.log.LogLevel.ERROR"
              xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org/osgi/service/log/LogEntry/LOG_WARNING</code></para></entry>

              <entry><para>When the log level is <xref
              linkend="org.osgi.service.log.LogLevel.WARN"
              xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org/osgi/service/log/LogEntry/LOG_INFO</code></para></entry>

              <entry><para>When the log level is <xref
              linkend="org.osgi.service.log.LogLevel.INFO"
              xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org/osgi/service/log/LogEntry/LOG_DEBUG</code></para></entry>

              <entry><para>When the log level is <xref
              linkend="org.osgi.service.log.LogLevel.DEBUG"
              xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org/osgi/service/log/LogEntry/LOG_OTHER</code></para></entry>

              <entry><para>When the log level is <xref
              linkend="org.osgi.service.log.LogLevel.TRACE"
              xrefstyle="hyperlink"/>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The properties of a log event are:</para>

      <itemizedlist>
        <listitem>
          <para><code>bundle.id</code> - (Long) The source bundle's id.</para>
        </listitem>

        <listitem>
          <para><code>bundle.symbolicName</code> - (<code>String</code>) The
          source bundle's symbolic name. Only set if not
          <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>bundle</code> - (<code>Bundle</code>) The source
          bundle.</para>
        </listitem>

        <listitem>
          <para><code>log.level</code> - (<code>Integer</code>) The integer
          log level.</para>
        </listitem>

        <listitem>
          <para><code>log.loggername</code> - (<code>String</code>) The logger
          name.</para>
        </listitem>

        <listitem>
          <para><code>log.threadinfo</code> - (<code>String</code>) The thread
          information for the thread creating the log entry.</para>
        </listitem>

        <listitem>
          <para><code>log.loglevel</code> - (<code>LogLevel</code>) The log
          level.</para>
        </listitem>

        <listitem>
          <para><code>message</code> - (<code>String</code>) The log
          message.</para>
        </listitem>

        <listitem>
          <para><code>timestamp</code> - (<code>Long</code>) The log entry's
          timestamp.</para>
        </listitem>

        <listitem>
          <para>log.entry - (<code>LogEntry</code>) The LogEntry
          object.</para>
        </listitem>
      </itemizedlist>

      <para>If the log entry has an associated Exception:</para>

      <itemizedlist>
        <listitem>
          <para><code>exception.class</code> - (<code>String</code>) The
          fully-qualified class name of the attached exception. Only set if
          the <code>getException</code> method returns a non-<code>null</code>
          value.</para>
        </listitem>

        <listitem>
          <para><code>exception.message</code> - (<code>String</code>) The
          message of the attached Exception. Only set if the Exception message
          is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>exception</code> - (<code>Throwable</code>) The
          Exception returned by the <code>getException</code> method.</para>
        </listitem>
      </itemizedlist>

      <para>If the <code>getServiceReference</code> method returns a non-
      <code>null</code> value:</para>

      <itemizedlist>
        <listitem>
          <para><code>service</code> - (<code>ServiceReference</code>) The
          result of the <code>getServiceReference</code> method.</para>
        </listitem>

        <listitem>
          <para><code>service.id</code> - (<code>Long</code>) The id of the
          service.</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> - (<code>String</code>) The service's
          persistent identity. Only set if the <code>service.pid</code>
          service property is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>service.objectClass</code> - (<code>String[]</code>) The
          object class of the service object.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="service.log-log.service">
    <title>Log Service</title>

    <para>The members of the <xref linkend="org.osgi.service.log.LogService"
    xrefstyle="hyperlink"/> interface are deprecated. Its <code>log</code>
    methods can still be used by bundles. These <code>log</code> methods are
    now specified to log to the Logger with the logger name
    <code>"LogService.&lt;bsn&gt;"</code> where <code>&lt;bsn&gt;</code> is
    the Bundle Symbolic Name of the bundle which obtained the <xref
    linkend="org.osgi.service.log.LogService" xrefstyle="hyperlink"/> object.
    This allows legacy logging to be configured as specified above.
    Furthermore, the integer log level values used with the <code>log</code>
    methods are mapped to the new <xref
    linkend="org.osgi.service.log.LogLevel" xrefstyle="hyperlink"/>s as
    follows:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.log.LogService.LOG_ERROR"
        xrefstyle="hyperlink"/> is mapped to <xref
        linkend="org.osgi.service.log.LogLevel.ERROR"
        xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogService.LOG_WARNING"
        xrefstyle="hyperlink"/> is mapped to <xref
        linkend="org.osgi.service.log.LogLevel.WARN"
        xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogService.LOG_INFO"
        xrefstyle="hyperlink"/> is mapped to <xref
        linkend="org.osgi.service.log.LogLevel.INFO"
        xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogService.LOG_DEBUG"
        xrefstyle="hyperlink"/> is mapped to <xref
        linkend="org.osgi.service.log.LogLevel.DEBUG"
        xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para>Any other value is mapped to <xref
        linkend="org.osgi.service.log.LogLevel.TRACE"
        xrefstyle="hyperlink"/>.</para>
      </listitem>
    </itemizedlist>

    <para>The specified integer log level value is stored in the generated
    <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> to
    be returned by <xref linkend="org.osgi.service.log.LogEntry.getLevel--"
    xrefstyle="hyperlink"/>.</para>

    <para>The implementation of this specification must use a single service
    registration using both the <xref
    linkend="org.osgi.service.log.LogService" xrefstyle="hyperlink"/> and
    <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/>
    service names since both service names represent the same log and since
    the <xref linkend="org.osgi.service.log.LogService"
    xrefstyle="hyperlink"/> type extends the <xref
    linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/>
    type.</para>
  </section>

  <section>
    <title>Capabilities</title>

    <para>The bundle providing the <xref
    linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/> and
    <xref linkend="org.osgi.service.log.LogService" xrefstyle="hyperlink"/>
    service must provide a capability in the <code>osgi.service</code>
    namespace representing this service. This capability must also declare a
    uses constraint for the <xref linkend="org.osgi.service.log"
    xrefstyle="hyperlink"/> package:</para>

    <para><programlisting>Provide-Capability: osgi.service;
 objectClass:List&lt;String&gt;=
 "org.osgi.service.log.LoggerFactory,org.osgi.service.log.LogService";
 uses:="org.osgi.service.log" </programlisting></para>

    <para>The bundle providing the <xref
    linkend="org.osgi.service.log.LogReaderService" xrefstyle="hyperlink"/>
    service must provide a capability in the <code>osgi.service</code>
    namespace representing this service. This capability must also declare a
    uses constraint for the <xref linkend="org.osgi.service.log"
    xrefstyle="hyperlink"/> package:</para>

    <programlisting>Provide-Capability: osgi.service;
 objectClass:List&lt;String&gt;="org.osgi.service.log.LogReaderService";
 uses:="org.osgi.service.log" </programlisting>

    <para>The bundle providing the <xref
    linkend="org.osgi.service.log.admin.LoggerAdmin" xrefstyle="hyperlink"/>
    service must provide a capability in the <code>osgi.service</code>
    namespace representing this service. This capability must also declare a
    uses constraint for the <xref linkend="org.osgi.service.log.admin"
    xrefstyle="hyperlink"/> package:</para>

    <programlisting>Provide-Capability: osgi.service;
 objectClass:List&lt;String&gt;="org.osgi.service.log.admin.LoggerAdmin";
 uses:="org.osgi.service.log.admin" </programlisting>

    <para>These capabilities must follow the rules defined for the
    <code>osgi.service</code> Namespace.</para>
  </section>

  <section>
    <title>Security</title>

    <para>The Log Service specification should only be implemented by trusted
    bundles. These bundles require
    <code>ServicePermission[LoggerFactory|LogReaderService|LoggerAdmin|LogService,
    REGISTER]</code> and
    <code>ServicePermission[ConfigurationAdmin|EventAdmin, GET]</code>.</para>

    <para>Virtually all bundles should get
    <code>ServicePermission[LoggerFactory|LogService, GET]</code> so they can
    log.</para>

    <para>Only trusted bundles who must be able to access log entries should
    be assigned <code>ServicePermission[LogReaderService, GET]</code>.</para>

    <para>Only trusted bundles who must be able to change log configuration
    should be assigned <code>ServicePermission[LogAdmin, GET]</code>.</para>
  </section>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.log.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.log.admin.xml"/>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed
      xml:id="service.log-slf4j.ref"><title>SLF4J</title><biblioid
      class="uri"><link
      xlink:href="https://www.slf4j.org"/></biblioid></bibliomixed>

      <bibliomixed
      xml:id="service.log-configurator.ref"><title>Configurator</title>OSGi
      Compendium, Chapter 150 Configurator Specification</bibliomixed>

      <bibliomixed xml:id="service.log-log.stream.ref"><title>Log Stream
      Provider Service</title>OSGi Compendium, Chapter 158 Log Stream Provider
      Service Specification</bibliomixed>
    </bibliolist>
  </section>
</chapter>
