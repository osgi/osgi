<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->

<chapter label="143"
         revision="$Id$"
         version="5.0" xml:id="service.network"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Network Interface Information Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.networkadapter-version"
    linkend="org.osgi.service.networkadapter"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Network Interface Information Service is a service that provides
    a standard way for bundles to receive notification about changes in the
    network interface and IP address.</para>

    <para>When the IP address has changed, bundles utilizing the IP address
    information need to detect this change. When using the standard Java API,
    such as <code>java.net.NetworkInterface</code> and
    <code>java.net.InetAddress</code>, calls to confirm the IP address at
    regular intervals are required. Since this is a process common to all
    bundles that need to detect any change in IP address information, this
    specification defines a notification feature for all available network
    interfaces, including the IP address. In addition, this specification
    defines an API that provides the function to obtain the network interface
    information and the information about the IP address bound to a network
    interface.</para>

    <para>The name of a network interface can be Operating System specific. In
    order for bundles to refer to the network interface it is necessary to
    distinguish the network interface in a form that it is independent of the
    Operating System.</para>

    <para>This specification defines the <code>NetworkAdapter</code> Service
    and <code>NetworkAddress</code> Service. These services provide
    information about the network interface and IP addresses.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Network Interface</emphasis> - Available and
          activated network interfaces provided in the execution environment.
          In this specification, the unit of the network interface is the
          logical interface, not the physical interface.</para>
        </listitem>

        <listitem>
          <para><emphasis>NetworkAdapter</emphasis> - The OSGi service that
          provides information related to the Network Interface. This service
          provides function similar to
          <code>java.net.NetworkInterface</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>NetworkAddress</emphasis> - The OSGi service that
          provides information of IP addresses available on the execution
          environment in which a Network Interface Information Service bundle
          is running.</para>
        </listitem>

        <listitem>
          <para><emphasis>Network Interface Information Service
          bundle</emphasis> - The OSGi bundle that implements NetworkAdapter
          and NetworkAddress services. Network Interface Information Service
          bundle registers NetworkAdapter and NetworkAddress services with the
          Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Network Interface Type</emphasis> - An identifier of
          the network interface. It is independent of the operating system.
          The two type of identifier string is specified in this
          specification. This specification allows that Network Interface type
          other than them can be defined by the platform provider in each
          environment. This identifier is used by user bundle to specify the
          network interface to be monitored.</para>
        </listitem>

        <listitem>
          <para><emphasis>IPAddressVersion</emphasis> - An identifier
          indicating the IP address version. For example, IPv4, IPv6. This
          identifier is defined in this specification. This identifier is used
          by a bundle to specify the network interface to be monitored.</para>
        </listitem>

        <listitem>
          <para><emphasis>IPAddressScope</emphasis> - An identifier indicating
          the scope of IP address. For example, GLOBAL, PRIVATE. This
          identifier is defined in this specification. This identifier is used
          by a bundle to specify the network interface to be monitored.</para>
        </listitem>
      </itemizedlist>

      <figure xml:id="service.network-figure-143-1">
        <title>Network Interface Information Service Overview Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.750in"
                       contentwidth="5.000in"
                       fileref="service_network_classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The <xref linkend="org.osgi.service.networkadapter.NetworkAdapter"
      xrefstyle="hyperlink"/> service provides the network interface
      information for a logical interface. <xref
      linkend="org.osgi.service.networkadapter.NetworkAddress"
      xrefstyle="hyperlink"/> service provides the IP address information for
      an IP address. A <code>NetworkAddress</code> service is associated with
      a <code>NetworkAdapter</code> service.</para>

      <para>When network interface information is changed, the service
      properties of the corresponing <code>NetworkAdapter</code> service and
      <code>NetworkAddress</code> service are changed. It is necessary for the
      bundle using these services to track these services and be advised of
      changes in the network interface information through Service
      Events.</para>
    </section>
  </section>

  <section>
    <title>NetworkAdapter Service</title>

    <para><xref linkend="org.osgi.service.networkadapter.NetworkAdapter"
    xrefstyle="hyperlink"/> is an interface that provides information about a
    single network interface provided by the execution environment. If
    multiple network interfaces are present, <code>NetworkAdapter</code>
    services that correspond to each network interface must be registered.
    <code>NetworkAdapter</code> services must be registered with service
    properties as shown in the following table.</para>

    <table>
      <title>Service properties of NetworkAdapter service</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="3*"/>

        <thead>
          <row>
            <entry>The key of service property</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>networkAdapter.type</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. Network interface type is set to a
            value.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.hardwareAddress</code></entry>

            <entry><code>byte[]</code></entry>

            <entry>Required property. Hardware address (MAC address) is set to
            a value. This property can also be obtained from <xref
            linkend="org.osgi.service.networkadapter.NetworkAdapter.getHardwareAddress--"
            xrefstyle="hyperlink"/>.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.name</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. Network interface name is set to a
            value. This property can also be obtained from <xref
            linkend="org.osgi.service.networkadapter.NetworkAdapter.getName--"
            xrefstyle="hyperlink"/>.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.displayName</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. Network interface display name is set to
            a value. This property can also be obtained from <xref
            linkend="org.osgi.service.networkadapter.NetworkAdapter.getDisplayName--"
            xrefstyle="hyperlink"/>.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.isUp</code></entry>

            <entry><code>boolean</code></entry>

            <entry>Required property. The value is true when a network
            interface is up and running, otherwise it is false.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.isLoopback</code></entry>

            <entry><code>boolean</code></entry>

            <entry>Required property. The value is true when a network
            interface is a loopback interface, otherwise it is false.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.isPointToPoint</code></entry>

            <entry><code>boolean</code></entry>

            <entry>Required property. The value is true when a network
            interface is a point to point interface, otherwise it is
            false.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.isVirtual</code></entry>

            <entry><code>boolean</code></entry>

            <entry>Required property. The value is true when a network
            interface is a virtual interface, otherwise it is false.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.supportsMulticast</code></entry>

            <entry><code>boolean</code></entry>

            <entry>Required property. The value is true when a network
            interface supports multicasting, otherwise it is false.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.parent</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. Service PID of the NetworkAdapter
            service which is parent of this NetworkAdapter is
            specified.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.subInterface</code></entry>

            <entry><code>String[]</code></entry>

            <entry>Required property. Service PID of the NetworkAdapter
            service which is subinterface of this NetworkAdapter is
            specified.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>When a network interface becomes available, a
    <code>NetworkAdapter</code> service associated with the network interface
    is registered with the service registry. If the network interface becomes
    unavailable, the corresponding <code>NetworkAdapter</code> service is
    unregistered.</para>

    <para>When the attribute values of the network interface change, the
    <code>NetworkAdapter</code> service is updated with changed service
    properties. <code>NetworkAdapter</code> interface provides a method
    corresponding to <code>java.net.NetworkInterface</code> in order to
    provide information on the associated network interface.</para>

    <section>
      <title>Network Interface Type</title>

      <para>Identifying the network interface is possible by using the network
      interface name. However, since the network interface name is an
      identifier that is dependent on the operating system, if network
      interface name is used as identifier, bundles must be implemented to be
      aware of the operating system. Therefore, in this specification,
      "network interface type” which is independent of the operating system,
      is used to identify the network interface. The network interface type
      string of "LAN" and "WAN" are defined in this specification. This
      specification allows that Network Interface type other than "LAN"and
      "WAN" can be defined by the platform provider in each environment. It is
      provided by the platform provider on which Network Interface Information
      Service bundle is running. Network Interface type "LAN"indicates the
      network interface connects to a local area network. Network Interface
      type "WAN" indicates the network interface connects to an external
      network (i.e. Internet). If a bundle wants to obtain the information of
      the network interface connected to the Internet, the bundle is able to
      get it by obtaining <code>NetworkAdapter</code> service with the
      <code>networkAdapter.type</code> service property set to the value
      "WAN".</para>

      <para>This specification allows that Network Interface type other than
      "LAN"and "WAN" can be defined by the platform provider in each
      environment. It may be provided by the platform provider on which
      Network Interface Information Service bundle is running.</para>

      <table>
        <title>Network Interface Type</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Network Interface Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>LAN</code></entry>

              <entry><code>The network interface to connect to a local area
              network. </code></entry>
            </row>

            <row>
              <entry><code>WAN</code></entry>

              <entry><code>The network interface to connect to an external
              network (i.e. Internet). </code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section>
    <title>NetworkAddress Service</title>

    <para><xref linkend="org.osgi.service.networkadapter.NetworkAddress"
    xrefstyle="hyperlink"/> interface provides information about an IP address
    available in the execution environment in which the a Network Interface
    Information Service bundle is running. <code>NetworkAddress</code> service
    is registered with the service registry together with service properties
    as shown in the following table.</para>

    <table>
      <title>Service properties of NetworkAddress service</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="3*"/>

        <thead>
          <row>
            <entry>The key of service property</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>networkAdapter.type</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. Network interface type is set to a
            value.</entry>
          </row>

          <row>
            <entry><code>ipAddress.version</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. IP address version is set to a
            value.</entry>
          </row>

          <row>
            <entry><code>ipAddress.scope</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. IP address scope is set to a
            value.</entry>
          </row>

          <row>
            <entry><code>ipAddress</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. IP address String is set to a
            value.</entry>
          </row>

          <row>
            <entry><code>subnetmask.length</code></entry>

            <entry><code>int</code></entry>

            <entry>Required property. Subnet mask length of the required
            properties IPv4, or IPv6 prefix length is set to a value.</entry>
          </row>

          <row>
            <entry><code>networkAdapter.pid</code></entry>

            <entry><code>String</code></entry>

            <entry>Required property. Service PID of the NetworkAdapterService
            corresponding to the network interface binding this IP address is
            set to a value.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>A <code>NetworkAddress</code> service is registered with the service
    registry for each available IP address. When an associated IP address is
    deleted, or the network interface to which the IP address is bound becomes
    unavailable, the <code>NetworkAddress</code> service is unregistered. When
    the associated IP address changes, the <code>NetworkAddress</code> service
    is updated with updated service properties. A bundle can detect the change
    of IP address by monitoring the registration or unregistering, updating of
    the <code>NetworkAddress</code> service. When registering a NetworkAdapter
    service, the Network Interface Information Service bundle must register it
    with a unique service PID. Because IP addresses are bound to a network
    interface, the service PID of the associated <code>NetworkAdapter</code>
    service and its network interface type are set in the service properties
    of the <code>NetworkAddress</code> service.</para>

    <section>
      <title>IP Address Version</title>

      <para>Defines the version of the IP address. A bundle can select
      <code>NetworkAddress</code> services using the following IP address
      version.</para>

      <table>
        <title>IP Address Version</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>IP Address Version</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>IPV4</code></entry>

              <entry><code>IP address version which means IPv4 address.
              </code></entry>
            </row>

            <row>
              <entry><code>IPV6</code></entry>

              <entry><code>IP address version which means IPv6 address.
              </code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>IP address scope</title>

      <para>Defins the scope of the IP address. A bundle can select
      <code>NetworkAddress</code> services using the following IP address
      scope.</para>

      <table>
        <title>IP Address Scope</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>IP Address Scope</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>GLOBAL</code></entry>

              <entry><code>IP address scope which means global
              address.</code></entry>
            </row>

            <row>
              <entry><code>PRIVATE_USE</code></entry>

              <entry><code>IP address scope which means private
              address.</code></entry>
            </row>

            <row>
              <entry><code>LOOPBACK</code></entry>

              <entry><code>IP address scope which means loopback
              address.</code></entry>
            </row>

            <row>
              <entry><code>LINKLOCAL</code></entry>

              <entry><code>IP address scope which means link local
              address.</code></entry>
            </row>

            <row>
              <entry><code>UNIQUE_LOCAL</code></entry>

              <entry><code>IP address scope which means
              unique-localaddress.</code></entry>
            </row>

            <row>
              <entry><code>UNSPECIFIED</code></entry>

              <entry><code>IP address scope which means the absence of an
              address. </code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>If a bundle which wants to check for an IP address of the IPv4
      global, the bundle is able to confirm by obtaining
      <code>NetworkAddress</code> service with the
      <code>ipAddress.version</code> service property set to the value
      "<code>IPV4</code>" and the <code>ipAddress.scope</code> service
      property set to the value "<code>GLOBAL</code>".</para>
    </section>
  </section>

  <section>
    <title>A Controller Example</title>

    <para>The following example shows the usage of <code>NetworkAddress</code>
    service. The sample <code>Controller</code> class extends the
    <code>ServiceTracker</code> class so that it can track
    <code>NetworkAddress</code> services.</para>

    <programlisting>class Controller extends ServiceTracker {
  Controller(BundleContext context) {
    super(context, NetworkAdapter.class.getName(), null);
  }

  public Object addingService(ServiceReference ref) {
    NetworkAdapter addAdapter =  (NetworkAdapter)super.addingService(ref);
    String type = addAdapter.getNetworkAdapterType();
    String displayName = addAdapter.getDisplayName();

    // ...

    String servicePID = (String)ref.getProperty(Constants.SERVICE_PID);
    try {
      String filter 
         = "(" + NetworkAddress.NETWORKADAPTER_PID + "=" + servicePID + ")";
      ServiceReference[] refs  
        = context.getServiceReferences(NetworkAddress.class.getName(), filter);
      for (int i = 0; i &lt; refs.length; i++) {
        NetworkAddress address = (NetworkAddress) context.getService(refs[i]);
        String ipAddress = address.getIpAddress();
        int subnetMaskLength = address.getSubnetMaskLength();
         // ...
       }
    } catch (InvalidSyntaxException e) {
      e.printStackTrace();
    }
    return addAdapter;
  }
}</programlisting>
  </section>

  <section>
    <title>Security</title>

    <para>To acquire network interface information, a bundle needs
    <code>ServicePermission[NetworkAdapter, GET]</code> and
    <code>ServicePermission[NetworkAddress, GET]</code>. It can use Filter
    Based Permissions. When a platform provider performs access control of the
    bundle, It can set ServicePermission like the following example.</para>

    <para><code>ServicePermission["(&amp;(objectClass=org.osgi.service.networkadapter.NetworkAdapter)(networkAdapter.type=LAN))",GET]
    </code></para>

    <para><code>ServicePermission["(&amp;(objectClass=org.osgi.service.networkadapter.NetworkAddress)(networkAdapter.type=LAN)
    (ipAddress.version=IPV4)(ipAddress.scope=PRIVATE_USE))", GET]
    </code></para>

    <para>The <code>NetworkAdapter</code> service and the
    <code>NetworkAddress</code> service should only be implemented by trusted
    bundles. This bundle requires <code>ServicePermission[NetworkAdapter,
    REGISTER]</code> and <code>ServicePermission[NetworkAddress,
    REGISTER]</code>.</para>
  </section>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.networkadapter.xml"/>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed><title>RFC 6890 : Special-Purpose IP Address
      Registries</title><biblioid class="uri"><link
      xlink:href="https://www.ietf.org/rfc/rfc6890.txt"/>, April
      2013</biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>
