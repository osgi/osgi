<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->

<chapter label="106"
         revision="$Id$"
         version="5.0" xml:id="service.prefs"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>PreferencesService Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.prefs-version"
    linkend="org.osgi.service.prefs"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Many bundles need to save some data persistently - in other words,
    the data is required to survive the stopping and restarting of the bundle
    and OSGi Framework. In some cases, the data is specific to a particular
    user. For example, imagine a bundle that implements some kind of game.
    User specific persistent data could include things like the user's
    preferred difficulty level for playing the game. Some data is not specific
    to a user, which we call <emphasis>system</emphasis> data. An example
    would be a table of high scores for the game.</para>

    <para>Bundles which need to persist data in an OSGi environment can use
    the file system via
    <code>org.osgi.framework.BundleContext.getDataFile</code>. A file system,
    however, can store only bytes and characters, and provides no direct
    support for named values and different data types.</para>

    <para>A popular class used to address this problem for Java applications
    is the <code>java.util.Properties</code> class. This class allows data to
    be stored as key/value pairs, called <emphasis>properties</emphasis>. For
    example, a property could have a name <code>com.acme.fudd</code> and a
    value of <code>elmer</code>. The <code>Properties</code> class has
    rudimentary support for storage and retrieving with its <code>load</code>
    and <code>store</code> methods. The <code>Properties</code> class,
    however, has the following limitations:</para>

    <itemizedlist>
      <listitem>
        <para>Does not support a naming hierarchy.</para>
      </listitem>

      <listitem>
        <para>Only supports <code>String</code> property values.</para>
      </listitem>

      <listitem>
        <para>Does not allow its content to be easily stored in a back-end
        system.</para>
      </listitem>

      <listitem>
        <para>Has no user name-space management.</para>
      </listitem>
    </itemizedlist>

    <para>Since the <code>Properties</code> class was introduced in Java 1.0,
    efforts have been undertaken to replace it with a more sophisticated
    mechanism. One of these efforts is this Preferences Service
    specification.</para>

    <section>
      <title>Essentials</title>

      <para>The focus of this specification is simplicity, not reliable access
      to stored data. This specification does <emphasis>not</emphasis> define
      a general database service with transactions and atomicity guarantees.
      Instead, it is optimized to deliver the stored information when needed,
      but it will return defaults, instead of throwing an exception, when the
      back-end store is not available. This approach may reduce the
      reliability of the data, but it makes the service easier to use, and
      allows for a variety of compact and efficient implementations.</para>

      <para>This API is made easier to use by the fact that many bundles can
      be written to ignore any problems that the Preferences Service may have
      in accessing the back-end store, if there is one. These bundles will
      mostly or exclusively use the methods of the <code>Preferences</code>
      interface which are not declared to throw a
      <code>BackingStoreException</code>.</para>

      <para><emphasis>This service only supports the storage of scalar values
      and byte arrays</emphasis>. It is not intended for storing large data
      objects like documents or images. No standard limits are placed on the
      size of data objects which can be stored, but implementations are
      expected to be optimized for the handling of small objects.</para>

      <para>A hierarchical naming model is supported, in contrast to the flat
      model of the <code>Properties</code> class. A hierarchical model maps
      naturally to many computing problems. For example, maintaining
      information about the positions of adjustable seats in a car requires
      information for each seat. In a hierarchy, this information can be
      modeled as a node per seat.</para>

      <para>A potential benefit of the Preferences Service is that it allows
      user specific preferences data to be kept in a well defined place, so
      that a user management system could locate it. This benefit could be
      useful for such operations as cleaning up files when a user is removed
      from the system, or to allow a user's preferences to be cloned for a new
      user.</para>

      <para>The Preferences Service does <emphasis>not</emphasis> provide a
      mechanism to allow one bundle to access the preferences data of another.
      If a bundle wishes to allow another bundle to access its preferences
      data, it can pass a <xref linkend="org.osgi.service.prefs.Preferences"
      xrefstyle="hyperlink"/> or <xref
      linkend="org.osgi.service.prefs.PreferencesService"
      xrefstyle="hyperlink"/> object to that bundle.</para>

      <para>The Preferences Service is not intended to provide configuration
      management functionality. For information regarding Configuration
      Management, refer to the <xref linkend="service.cm"/>.</para>
    </section>

    <section>
      <title>Entities</title>

      <para>The <code>PreferencesService</code> is a relatively simple
      service. It provides access to the different roots of Preferences trees.
      A single system root node and any number of user root nodes are
      supported. Each <emphasis>node</emphasis> of such a tree is an object
      that implements the <code>Preferences</code> interface.</para>

      <para>This <code>Preferences</code> interface provides methods for
      traversing the tree, as well as methods for accessing the properties of
      the node. This interface also contains the methods to flush data into
      persistent storage, and to synchronize the in-memory data cache with the
      persistent storage.</para>

      <para>All nodes except root nodes have a parent. Nodes can have multiple
      children.</para>

      <figure xml:id="i1423659">
        <title>Preferences Class Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.444in"
                       contentwidth="7.000in" fileref="prefs-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Operation</title>

      <para>The purpose of the Preferences Service specification is to allow
      bundles to store and retrieve properties stored in a tree of nodes,
      where each node implements the <code>Preferences</code> interface. The
      <code>PreferencesService</code> interface allows a bundle to create or
      obtain a Preferences tree for system properties, as well as a
      Preferences tree for each user of the bundle.</para>

      <para>This specification allows for implementations where the data is
      stored locally on the Framework or remotely on a back-end system.</para>
    </section>
  </section>

  <section>
    <title>Preferences Interface</title>

    <para><code>Preferences</code> is an interface that defines the methods to
    manipulate a node and the tree to which it belongs. A
    <code>Preferences</code> object contains:</para>

    <itemizedlist>
      <listitem>
        <para>A set of properties in the form of key/value pairs.</para>
      </listitem>

      <listitem>
        <para>A parent node.</para>
      </listitem>

      <listitem>
        <para>A number of child nodes.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Hierarchies</title>

      <para>A valid <code>Preferences</code> object always belongs to a
      <emphasis>tree</emphasis>. A tree is identified by its root node. In
      such a tree, a <code>Preferences</code> object always has a single
      parent, except for a root node which has a <code>null</code>
      parent.</para>

      <para>The root node of a tree can be found by recursively calling the
      <xref linkend="org.osgi.service.prefs.Preferences.parent--"
      xrefstyle="hyperlink"/> method of a node until <code>null</code> is
      returned. The nodes that are traversed this way are called the
      <emphasis>ancestors</emphasis> of a node.</para>

      <para>Each Preferences object has a private name-space for child nodes.
      Each child node has a name that must be unique among its siblings. Child
      nodes are created by getting a child node with the <xref
      linkend="org.osgi.service.prefs.Preferences.node-String-"
      xrefstyle="hyperlink"/> method. The <code>String</code> argument of this
      call contains a path name. Path names are explained in the next
      section.</para>

      <para>Child nodes can have child nodes recursively. These objects are
      called the <emphasis>descendants</emphasis> of a node.</para>

      <para>Descendants are automatically created when they are obtained from
      a <code>Preferences</code> object, including any intermediate nodes that
      are necessary for the given path. If this automatic creation is not
      desired, the <xref
      linkend="org.osgi.service.prefs.Preferences.nodeExists-String-"
      xrefstyle="hyperlink"/> method can be used to determine if a node
      already exists.</para>

      <figure>
        <title>Categorization of nodes in a tree</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.500in"
                       contentwidth="6.499in"
                       fileref="node-categorization.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Naming</title>

      <para>Each node has a name relative to its parent. A name may consist of
      Unicode characters except for the solidus (<code>'/' \u002F</code>).
      There are no special names, like <code>".."</code> or
      <code>"."</code>.</para>

      <para>Empty names are reserved for root nodes. Node names that are
      directly created by a bundle must <emphasis>always</emphasis> contain at
      least one character.</para>

      <para>Preferences node names and property keys are <emphasis>case
      sensitive</emphasis>: for example, "<code>org.osgi"</code> and
      "<code>oRg.oSgI</code>" are two distinct names.</para>

      <para>The Preferences Service supports different roots, so there is no
      absolute root for the Preferences Service. This concept is similar to
      the Windows Registry that also supports a number of roots.</para>

      <para>A path consists of one or more node names, separated by a solidus
      (<code>'/' \u002F</code>). Paths beginning with a solidus (<code>'/'
      \u002F</code>) are called <emphasis>absolute paths</emphasis> while
      other paths are called <emphasis>relative paths</emphasis>. Paths cannot
      end with a solidus (<code>'/' \u002F</code>) except for the special case
      of the root node which has absolute path <code>"/"</code>.</para>

      <para>Path names are always associated with a specific node; this node
      is called the current node in the following descriptions. Paths identify
      nodes as follows.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Absolute path</emphasis> - The first
          <code>"/"</code> is removed from the path, and the remainder of the
          path is interpreted as a relative path from the tree's root
          node.</para>
        </listitem>

        <listitem>
          <para><emphasis>Relative path</emphasis> -</para>

          <itemizedlist>
            <listitem>
              <para>If the path is the empty string, it identifies the current
              node.</para>
            </listitem>

            <listitem>
              <para>If the path is a name (does not contain a
              <code>"/"</code>), then it identifies the child node with that
              name.</para>
            </listitem>

            <listitem>
              <para>Otherwise, the first name from the path identifies a child
              of the current node. The name and solidus (<code>'/'
              \u002F</code>) are then removed from the path, and the remainder
              of the path is interpreted as a relative path from the child
              node.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Tree Traversal Methods</title>

      <para>A tree can be traversed and modified with the following
      methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref
          linkend="org.osgi.service.prefs.Preferences.childrenNames--"
          xrefstyle="hyperlink"/> - Returns the names of the child
          nodes.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.service.prefs.Preferences.parent--"
          xrefstyle="hyperlink"/> - Returns the parent node.</para>
        </listitem>

        <listitem>
          <para><xref
          linkend="org.osgi.service.prefs.Preferences.removeNode--"
          xrefstyle="hyperlink"/> - Removes this node and all its
          descendants.</para>
        </listitem>

        <listitem>
          <para><xref
          linkend="org.osgi.service.prefs.Preferences.node-String-"
          xrefstyle="hyperlink"/> - Returns a Preferences object, which is
          created if it does not already exist. The parameter is an absolute
          or relative path.</para>
        </listitem>

        <listitem>
          <para><xref
          linkend="org.osgi.service.prefs.Preferences.nodeExists-String-"
          xrefstyle="hyperlink"/> - Returns true if the Preferences object
          identified by the path parameter exists.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Properties</title>

      <para>Each Preferences node has a set of key/value pairs called
      properties. These properties consist of:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Key</emphasis> - A key is a <code>String</code>
          object and <emphasis>case sensitive.</emphasis></para>
        </listitem>

        <listitem>
          <para>The name-space of these keys is separate from that of the
          child nodes. A Preferences node could have both a child node named
          <code>fudd</code> and a property named <code>fudd</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Value</emphasis> - A value can always be stored and
          retrieved as a <code>String</code> object. Therefore, it must be
          possible to encode/decode all values into/from <code>String</code>
          objects (though it is not required to store them as such, an
          implementation is free to store and retrieve the value in any
          possible way as long as the <code>String</code> semantics are
          maintained). A number of methods are available to store and retrieve
          values as primitive types. These methods are provided both for the
          convenience of the user of the <code>Preferences</code> interface,
          and to allow an implementation the option of storing the values in a
          more compact form.</para>
        </listitem>
      </itemizedlist>

      <para>All the keys that are defined in a <code>Preferences</code> object
      can be obtained with the <xref
      linkend="org.osgi.service.prefs.Preferences.keys--"
      xrefstyle="hyperlink"/> method. The <xref
      linkend="org.osgi.service.prefs.Preferences.clear--"
      xrefstyle="hyperlink"/> method can be used to clear all properties from
      a <code>Preferences</code> object. A single property can be removed with
      the <xref linkend="org.osgi.service.prefs.Preferences.remove-String-"
      xrefstyle="hyperlink"/> method.</para>
    </section>

    <section>
      <title>Storing and Retrieving Properties</title>

      <para>The <code>Preferences</code> interface has a number of methods for
      storing and retrieving property values based on their key. All the
      <code>put*</code> methods take as parameters a key and a value. All the
      <code>get*</code> methods take as parameters a key and a default
      value.</para>

      <itemizedlist>
        <listitem>
          <para><xref
          linkend="org.osgi.service.prefs.Preferences.put-String-String-"
          xrefstyle="hyperlink"/>, <xref
          linkend="org.osgi.service.prefs.Preferences.get-String-String-"
          xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref
          linkend="org.osgi.service.prefs.Preferences.putBoolean-String-boolean-"
          xrefstyle="hyperlink"/>, <xref
          linkend="org.osgi.service.prefs.Preferences.getBoolean-String-boolean-"
          xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref
          linkend="org.osgi.service.prefs.Preferences.putInt-String-int-"
          xrefstyle="hyperlink"/>, <xref
          linkend="org.osgi.service.prefs.Preferences.getInt-String-int-"
          xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref
          linkend="org.osgi.service.prefs.Preferences.putLong-String-long-"
          xrefstyle="hyperlink"/>, <xref
          linkend="org.osgi.service.prefs.Preferences.getLong-String-long-"
          xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref
          linkend="org.osgi.service.prefs.Preferences.putFloat-String-float-"
          xrefstyle="hyperlink"/>, <xref
          linkend="org.osgi.service.prefs.Preferences.getFloat-String-float-"
          xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref
          linkend="org.osgi.service.prefs.Preferences.putDouble-String-double-"
          xrefstyle="hyperlink"/>, <xref
          linkend="org.osgi.service.prefs.Preferences.getDouble-String-double-"
          xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref
          linkend="org.osgi.service.prefs.Preferences.putByteArray-String-byte---"
          xrefstyle="hyperlink"/>, <xref
          linkend="org.osgi.service.prefs.Preferences.getByteArray-String-byte---"
          xrefstyle="hyperlink"/></para>
        </listitem>
      </itemizedlist>

      <para>The methods act as if all the values are stored as
      <code>String</code> objects, even though implementations may use
      different representations for the different types. For example, a
      property can be written as a <code>String</code> object and read back as
      a <code>float</code>, providing that the string can be parsed as a valid
      Java <code>float</code> object. In the event of a parsing error, the
      <code>get*</code> methods do not raise exceptions, but instead return
      their default parameters.</para>
    </section>

    <section>
      <title>Defaults</title>

      <para>All <code>get*</code> methods take a default value as a parameter.
      The reasons for having such a default are:</para>

      <itemizedlist>
        <listitem>
          <para>When a property for a <code>Preferences</code> object has not
          been set, the default is returned instead. In most cases, the bundle
          developer does not have to distinguish whether or not a property
          exists.</para>
        </listitem>

        <listitem>
          <para>A <emphasis>best effort</emphasis> strategy has been a
          specific design choice for this specification. The bundle developer
          should not have to react when the back-end store is not available.
          In those cases, the default value is returned without further
          notice.</para>

          <para>Bundle developers who want to assure that the back-end store
          is available should call the <code>flush</code> or <code>sync</code>
          method. Either of these methods will throw a
          <code>BackingStoreException</code> if the back-end store is not
          available.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Concurrency</title>

    <para>This specification specifically allows an implementation to modify
    <code>Preferences</code> objects in a back-end store. If the back-end
    store is shared by multiple processes, concurrent updates may cause
    differences between the back-end store and the in-memory
    <code>Preferences</code> objects.</para>

    <para>Bundle developers can partly control this concurrency with the <xref
    linkend="org.osgi.service.prefs.Preferences.flush--"
    xrefstyle="hyperlink"/> and <xref
    linkend="org.osgi.service.prefs.Preferences.sync--"
    xrefstyle="hyperlink"/> method. Both methods operate on a
    <code>Preferences</code> object.</para>

    <para>The <code>flush</code> method performs the following actions:</para>

    <itemizedlist>
      <listitem>
        <para>Stores (makes persistent) any ancestors (including the current
        node) that do not exist in the persistent store.</para>
      </listitem>

      <listitem>
        <para>Stores any properties which have been modified in this node
        since the last time it was flushed.</para>
      </listitem>

      <listitem>
        <para>Removes from the persistent store any child nodes that were
        removed from this object since the last time it was flushed.</para>
      </listitem>

      <listitem>
        <para>Flushes all existing child nodes.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>sync</code> method will first flush, and then ensure that
    any changes that have been made to the current node and its descendants in
    the back-end store (by some other process) take effect. For example, it
    could fetch all the descendants into a local cache, or it could clear all
    the descendants from the cache so that they will be read from the back-end
    store as required.</para>

    <para>If either method fails, a <code>BackingStoreException</code> is
    thrown.</para>

    <para>The <code>flush</code> or <code>sync</code> methods provide no
    atomicity guarantee. When updates to the same back-end store are done
    concurrently by two different processes, the result may be that changes
    made by different processes are intermingled. To avoid this problem,
    implementations may simply provide a dedicated section (or name-space) in
    the back-end store for each OSGi environment, so that clashes do not
    arise, in which case there is no reason for bundle programmers to ever
    call <code>sync</code>.</para>

    <para>In cases where <code>sync</code> is used, the bundle programmer
    needs to take into account that changes from different processes may
    become intermingled, and the level of granularity that can be assumed is
    the individual property level. Hence, for example, if two properties need
    to be kept in lockstep, so that one should not be changed without a
    corresponding change to the other, consider combining them into a single
    property, which would then need to be parsed into its two constituent
    parts.</para>
  </section>

  <section>
    <title>PreferencesService Interface</title>

    <para>The <code>PreferencesService</code> is obtained from the Framework's
    service registry in the normal way. Its purpose is to provide access to
    Preferences root nodes.</para>

    <para>A Preferences Service maintains a system root and a number of user
    roots. User roots are automatically created, if necessary, when they are
    requested. Roots are maintained on a per bundle basis. For example, a user
    root called <code>elmer</code> in one bundle is distinct from a user root
    with the same name in another bundle. Also, each bundle has its own system
    root. Implementations should use a <code>ServiceFactory</code> service
    object to create a separate <code>PreferencesService</code> object for
    each bundle.</para>

    <para>The precise description of <emphasis>user</emphasis> and
    <emphasis>system</emphasis> will vary from one bundle to another. The
    Preference Service only provides a mechanism, the bundle may use this
    mechanism in any desired way.</para>

    <para>The <xref linkend="org.osgi.service.prefs.PreferencesService"
    xrefstyle="hyperlink"/> interface has the following methods to access the
    system root and user roots:</para>

    <itemizedlist>
      <listitem>
        <para><xref
        linkend="org.osgi.service.prefs.PreferencesService.getSystemPreferences--"
        xrefstyle="hyperlink"/> - Return a <code>Preferences</code> object
        that is the root of the system preferences tree.</para>
      </listitem>

      <listitem>
        <para><xref
        linkend="org.osgi.service.prefs.PreferencesService.getUserPreferences-String-"
        xrefstyle="hyperlink"/> - Return a <code>Preferences</code> object
        associated with the user name that is given as argument. If the user
        does not exist, a new root is created atomically.</para>
      </listitem>

      <listitem>
        <para><xref
        linkend="org.osgi.service.prefs.PreferencesService.getUsers--"
        xrefstyle="hyperlink"/> - Return an array of the names of all the
        users for whom a Preferences tree exists.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="i1423660">
    <title>Cleanup</title>

    <para>The Preferences Service must listen for bundle uninstall events, and
    remove all the preferences data for the bundle that is being uninstalled.
    The Preferences Service must use the bundle id for the association and not
    the location.</para>

    <para>It also must handle the possibility of a bundle getting uninstalled
    while the Preferences Service is stopped. Therefore, it must check on
    startup whether preferences data exists for any bundle which is not
    currently installed. If it does, that data must be removed.</para>
  </section>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.prefs.xml"/>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1227403"><title>JSR 10 Preferences
      API</title><biblioid class="uri"><link
      xlink:href="https://www.jcp.org/en/jsr/detail?id=10"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1219521"><title>RFC 2045 Base 64
      encoding</title><biblioid class="uri"><link
      xlink:href="https://www.ietf.org/rfc/rfc2045.txt"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>
