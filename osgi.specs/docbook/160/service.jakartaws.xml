<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->
<chapter label="160" revision="$Id$" version="5.0"
         xml:id="service.jakartaws" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Whiteboard Specification for Jakarta™ XML Web Services</title>

  <titleabbrev>Jakarta™ XML Web Services Whiteboard</titleabbrev>

  <info>
    <releaseinfo>
      <xref endterm="org.osgi.service.jakartaws.whiteboard-version"
            linkend="org.osgi.service.webservice.whiteboard"/>
    </releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>
    Webservices are an important part in todays maschine-to-maschine communication and the <xref linkend="service.jakartaws-i21217577"/> (formerly known as JAX-WS) specification offers a vendor neutral way of writing and using such services. 
    It defines a standard Java-to-WSDL mapping which determines how web service operations are bound to Java methods when a SOAP message invokes an action.
     
    Managing endpoints in a dynamic way with integration to different listeners and transports can be a challenging task, this specification aims to make this task much more easier using the famous <xref linkend="service.jakartaws-whiteboard.pattern.ref" />
    and allow integration with existing transport specifications.
    
    Even though different transports are supported, the most common one is the Http transport and also the only one that is mandatory for a <xref linkend="service.jakartaws-i21217577"/> implementation,
    therefore this specification also focuses on the Http transport only and define a way to interact with it, implementations are free to support other kinds of transports as well.
    </para>

    <para>The Whiteboard Specification for Jakarta™ XML Web Services supports:</para>

    <itemizedlist>
      <listitem>
        <para>
            <emphasis>Registering Web Service Implementation</emphasis> - an implementation is an annotated "implementor" of the webservice used by an endpoint,  an "implementor" is published by an 
            Endpoint that handles the incomming and outgoing messages on the transport level.
        </para>
      </listitem>
      <listitem>
        <para><emphasis>Registering Handlers</emphasis> - a handler can intercept messages when they pass from / to Endpoints and perform actions on it.</para>
      </listitem>

    </itemizedlist>

    <para>Whiteboard Specification for Jakarta™ XML Web Services implementations must support
    at least version 4.0 of the Jakarta™ XML Web Services API and registering endpoints to the protocols provided by the used API implementation, that is http as a minimum.</para>

    <section>
      <title>Entities</title>

      <para>This specification defines the following entities:</para>
      
      <itemizedlist>
        <listitem>
          <para><emphasis><xref linkend="service.jakartaws-handler"/></emphasis> - An object registered in the Service Registry
          providing responsible for filtering or inspection of messages while they flow through the webservice processing.</para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint Implementor</emphasis> - An implementation that can be used to registered as an <xref linkend="service.jakartaws-endpoint"/></para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint Registrar</emphasis> - An implementation that collects <emphasis>Handler</emphasis> and <emphasis>Endpoint Implementor</emphasis> instances and publish them for a given transport</para>
        </listitem>

      </itemizedlist>
      
      <figure pgwide="1" xml:id="service.jakartaws.whiteboard-overview">
        <title>Jakarta™ XML Web Services Overview Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.313in"
                       contentwidth="5.496in" fileref="overall.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
   </section>

   <section xml:id="service.jakartaws.whiteboard">
    <title>Jakarta™ XML Web Services Whiteboard</title>

    <para>While in a traditional web application the configuration is rather static and known in advance in OSGi items can come and go anytime and code should be aware of this dynamism.
        Also registration of listeners must happen before an endpoint is published and only weak typing makes it hard to handle this right manually.
        As a result, the publishing of Web Services in the current state of the specification goes against the loose coupling concept usually provided by OSGi 
        as it requires knowledge about the stakeholders involved
        </para>
        <para>
         It is therefore the responsibility of the Web Services Whiteboard to handle this cases in a transparent manner so the user can focus on the actual work and 
         use common dependency injection techniques like Declarative Services to inject dependencies.
         </para>
   </section>
   
   <section xml:id="service.jakartars.endpoint.services">
    <title>Registering Endpoint Implementor</title>

    <para>Endpoint Implementor can be registered with the Jakarta™ XML Web Services Whiteboard by registering them as Whiteboard
    services. This means that the endpoint POJO implementations are registered in the Service Registry. As Webservice Endpoints are
    POJOs they may be registered using <emphasis>any</emphasis> valid service interface, including <code>Object</code> and use any
    annotations on endpoint object, just as it would outside of OSGi.</para>

    <para>To be picked up as endpoints, the POJO they are instead registered with the
    <code>osgi.jakarta.xml.ws.endpoint.implementor</code> service property with a value of
    <code>"true"</code>. This property serves as a marker to the Jakarta™ XML Web Services Whiteboard
    runtime, indicating that this OSGi service should further be processed as an endpoint.</para>
    <para>Beside that the property <code>osgi.jakarta.xml.ws.endpoint.address</code> can be specified as a way to tell at what address an Endpoint has to be published.
    If given this must be passed to the Endpoint.publish(String) method, if it is not specified or is empty it is assumed that
    there is some other property available to allow the Whiteboard runtime to derive the publishing address or context.
    In the scope of this specification there is the <emphasis>osgi.jakarta.xml.ws.endpoint.http.contextpath</emphasis>
    that defines that the endpoint has to be published to http transport where / represents the root, what host or port is chosen is defined by the configuration of the implementation. 
    </para>

    <para>The code below shows an simple echo webservice Endpoint Implementor, the `@WebService` / `@WebMethod` is 
      a jakarta annotation and therefore not processed by the Whiteboard runtime:
    </para>

      <programlisting>@WebService
@WhiteboardEndpoint(address = "http://localhost/echo")
@Component(immediate = true, service = WSEcho.class, property = "wstype=echo")
public class WSEcho {

    @WebMethod(operationName = "echo", action = "echo")
    public String echo(@WebParam(name = "textIn") String text) {
        return text;
    }

}</programlisting>
    <para>
     There is no particular order in which Endpoint implementors are published, it could be that they are registered as soon as the service is visible in the OSGi service registry
     or even delayed in the background. If any particular ordering of publishing is desired this must be synchronized externally, e.g by observing the Runtime Service and waiting for a prerequisite
     endpoint to show up. Due to the dynamic nature of OSGi, most system should be design in a way that the exact point in time of publishing the endpoint is not required for the system to function correctly.
    </para>
   </section>
   
   <section xml:id="service.jakartaws.handler.services">
    <title>Registering Webservice Handlers</title>

    <para>Webservice Handlers can be registered with the Jakarta™ XML Web Services Whiteboard by registering them as Whiteboard
    services. This means that the handler POJO implementations are registered
    in the Service Registry. As Handler Services must be registered using <emphasis>jakarta.xml.ws.handler.Handler</emphasis> 
    as the service interface but implement any of the valid types of the Jakarta™ XML Web Services specification, 
    registering any invalid handler will result in an error of the matching endpoints.
    To be recognized by the whiteboard registrar, the service must be registered with a boolean property of 
    <emphasis>osgi.jakarta.xml.ws.handler.extension</emphasis> of value <emphasis>true</emphasis>.
    
    </para>

    <para>The code below shows an example of a logging handler that wants to intercept incoming and outgoing messages,
    this handler is targeted to any registered <emphasis>Endpoint Implementor</emphasis>:</para>

      <programlisting>@Component(service = Handler.class)
@XmlWsHandler()
public class SOAPLoggingHandler implements SOAPHandler&lt;SOAPMessageContext&gt; {

     public Set&lt;QName&gt; getHeaders() {
        return null;
    }

    public boolean handleMessage(SOAPMessageContext smc) {
         smc.getMessage().writeTo(System.out);
        return true;
    }

    public boolean handleFault(SOAPMessageContext smc) {
        smc.getMessage().writeTo(System.err);
        return true;
    }

    public void close(MessageContext messageContext) {
    }
    
}</programlisting>
<para>
 Handlers will be added to the Endpoint in service ranking order, that means that Handlers with a higher service ranking will be called before those with a lower service ranking.
 If two handlers have the same ranking they are sorted according to their service id, having handlers registered later being called later in the handler chain. 
</para>
</section>
    <section xml:id="service.jakartaws.handler.services.target">
         <title>Targeting specific Endpoint Implementor</title>
         <para>
         If a handler wants to target a specific <emphasis>Endpoint Implementor</emphasis> it can specify the <emphasis>osgi.jakarta.xml.ws.handler.filter</emphasis> service properties
         and will only be installed for such <emphasis>Endpoint Implementor</emphasis> that match the provided filter.
         </para>
             <para>The previous example targeting an <emphasis>Endpoint Implementor</emphasis> registered with a <emphasis>wstype</emphasis> property of <emphasis>echo</emphasis> looks like this:</para>

      <programlisting>@Component(service = Handler.class)
@XmlWsHandler(filter="(wstype=echo)")
public class SOAPLoggingHandler implements SOAPHandler&lt;SOAPMessageContext&gt; {

       ... like before ...
}</programlisting>
     </section>
    </section>
    <section>
        <title>Jakarta™ XML Web Services Whiteboard Implementation</title>
        <para>
            The Jakarta™ XML Web Services Whiteboard implementation is responsible for:
            <itemizedlist>
                <listitem>
                     <para>Track any service registered with a service property <emphasis>osgi.jakarta.xml.ws.endpoint.implementor</emphasis> 
                     with the value <emphasis>true</emphasis> and registers and <emphasis>Endpoint</emphasis> with a transport.
                     An implementation might use different techniques to discover a suitable way and support for different protocols but at least the publishing using
                     the default endpoint publish as described in the Jakarta XML Webservice specification must be supported. 
                     In addition to that implementations are encouraged to also support publishing to the Http Whiteboard Service using property <emphasis>osgi.jakarta.xml.ws.endpoint.http.contextpath</emphasis>
                     as described in <emphasis>Registering Endpoint Implementor</emphasis>
                     </para>
                </listitem>
                <listitem>
                     <para>Track all registered <emphasis>jakarta.xml.ws.handler.Handler</emphasis> service with the a service property <emphasis>osgi.jakarta.xml.ws.handler.extension</emphasis> 
                     with the value <emphasis>true</emphasis> and attach them to the target implementors <emphasis>Endpoint</emphasis>.</para>
                </listitem>
                <listitem>
                     <para>Publish a <emphasis>WebserviceServiceRuntime</emphasis> service to the OSGi service registry so interested parties can query the current state.</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            As <emphasis>Endpoint</emphasis> instances can only be registered once with a transport and after publishing can't change its handler chain, special care has to be taken when Endpoints are created and published.
            Because of this an <emphasis>Endpoint Registrar</emphasis> must ensure that each Enpoint will be refreshed when the Implementor or any Handler changes what possibly leads to the transport not serving request for a short amount of time.
        </para>
        <section>
            <title>The WebserviceServiceRuntime</title>
             <para>The <xref
                  linkend="org.osgi.service.webservice.runtime.WebserviceServiceRuntime" xrefstyle="hyperlink"/> service represents the runtime state information
                  of a Jakarta XML Web Services Whiteboard instance. This information is provided through Data Transfer Objects (DTOs). The architecture of
                  OSGi DTOs is described in <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para>
            <para>The <code>WebserviceServiceRuntime</code> provides service registration properties to describe its underlying Jakarta XML Web
                      Services Whiteboard. These service properties can include implementation-specific key-value pairs.
                      They also include the following:</para>

      <table pgwide="1">
        <title>Service properties for the <code>WebserviceServiceRuntime</code> service</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1.9*"/>

          <colspec colnum="2" colwidth="0.7*"/>

          <colspec colnum="3" colwidth="4.2*"/>

          <thead>
            <row>
              <entry>Service Property Name</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>service.changecount</code></entry>
              <entry><code>Long</code></entry>
              <entry><para>Whenever the DTOs available from the WebserviceServiceRuntime service change, the value
              of this property will increase.</para> <para>This allows
              interested parties to be notified of changes to the DTOs by
              observing Service Events of type <code>MODIFIED</code> for the
              <xref linkend="org.osgi.service.webservice.runtime.WebserviceServiceRuntime"
              xrefstyle="hyperlink"/> service. See <code>org.osgi.framework.Constants.SERVICE_CHANGECOUNT</code> in <xref linkend="intro.core.release" xrefstyle="template:%t"/>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
        </section>
        <section>
            <title>WebserviceServiceRuntime DTOs</title>
            <para>
                The <xref linkend="org.osgi.service.webservice.runtime.WebserviceServiceRuntime.getRuntimeDTO--" xrefstyle="hyperlink"/> method allows access to the 
                <xref linkend="org.osgi.service.webservice.runtime.dto.RuntimeDTO" xrefstyle="hyperlink" /> that provides a snapshot of the current state of the runtime to gather information about
                <itemizedlist>
                  <listitem>
                    <para>
                     Currently successfully published <xref linkend="org.osgi.service.webservice.runtime.dto.RuntimeDTO.endpoints" xrefstyle="hyperlink" /> or 
                     <xref linkend="org.osgi.service.webservice.runtime.dto.RuntimeDTO.failedEndpoints" xrefstyle="hyperlink" />.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                     Currently successfully bound <xref linkend="org.osgi.service.webservice.runtime.dto.RuntimeDTO.handlers" xrefstyle="hyperlink" /> as well as
                     <xref linkend="org.osgi.service.webservice.runtime.dto.RuntimeDTO.failedHandlers" xrefstyle="hyperlink" /> that do not match any endpoint.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                     The <xref linkend="org.osgi.service.webservice.runtime.dto.RuntimeDTO.serviceReference" xrefstyle="hyperlink" /> of the runtime itself.
                    </para>
                  </listitem>
                </itemizedlist>
            </para>
            <para>
               The <xref linkend="org.osgi.service.webservice.runtime.dto.EndpointDTO" xrefstyle="hyperlink" /> provides the following information
               <itemizedlist>
                  <listitem>
                    <para>
                     The full <xref linkend="org.osgi.service.webservice.runtime.dto.EndpointDTO.address" xrefstyle="hyperlink" /> this endpoint was
                     published, depending on the used enpoint transport this might differs to the value given in the endpoint registration e.g. if the value is relative to some basedir or was transformed
                     to some rules determined by the implementation (e.g. using a loadbalancer or rewriting of URLs).
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                     Currently bound <xref linkend="org.osgi.service.webservice.runtime.dto.EndpointDTO.handlers" xrefstyle="hyperlink" /> that matched the endpoint.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                     The <xref linkend="org.osgi.service.webservice.runtime.dto.EndpointDTO.implementor" xrefstyle="hyperlink" /> service reference of the enpoint
                     that can be used to gather further properties.
                    </para>
                  </listitem>
               </itemizedlist>
            </para>
            <para>
               The <xref linkend="org.osgi.service.webservice.runtime.dto.FailedDTO" xrefstyle="hyperlink" /> is the base class for the <xref linkend="org.osgi.service.webservice.runtime.dto.FailedEndpointDTO" xrefstyle="hyperlink" />
               and <xref linkend="org.osgi.service.webservice.runtime.dto.FailedEndpointDTO" xrefstyle="hyperlink" /> and provides basic information about a failure:
               <itemizedlist>
                  <listitem>
                    <para>
                     A <xref linkend="org.osgi.service.webservice.runtime.dto.FailedDTO.failureCode" xrefstyle="hyperlink" /> that describes
                     the nature of the failure, see <xref linkend="JaxWsWhiteboardErrorHandling"  xrefstyle="hyperlink"/> for possible values.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                     A <xref linkend="org.osgi.service.webservice.runtime.dto.FailedDTO.failureMessage" xrefstyle="hyperlink" /> that can contain
                     further details. The content of this field is not specified and might be <code>null</code>.
                    </para>
                  </listitem>
               </itemizedlist>
            </para>
            <para>
               The <xref linkend="org.osgi.service.webservice.runtime.dto.FailedEndpointDTO" xrefstyle="hyperlink" /> extends the
               <xref linkend="org.osgi.service.webservice.runtime.dto.FailedDTO" xrefstyle="hyperlink" /> with additional information specific to endpoints:
               <itemizedlist>
                  <listitem>
                    <para>
                     The service reference of the <xref linkend="org.osgi.service.webservice.runtime.dto.FailedEndpointDTO.implementor" xrefstyle="hyperlink" /> that describes
                     failed to be published as an endpoint.
                    </para>
                  </listitem>
               </itemizedlist>
            </para>
           <para>
               The <xref linkend="org.osgi.service.webservice.runtime.dto.FailedHandlerDTO" xrefstyle="hyperlink" /> extends the
               <xref linkend="org.osgi.service.webservice.runtime.dto.FailedDTO" xrefstyle="hyperlink" /> with additional information specific to handlers:
               <itemizedlist>
                  <listitem>
                    <para>
                     The <xref linkend="org.osgi.service.webservice.runtime.dto.FailedHandlerDTO.serviceReference" xrefstyle="hyperlink" /> 
                     to the handler that failed.
                    </para>
                  </listitem>
               </itemizedlist>
            </para>
        </section>
        <section xreflabel="Whiteboard Error Handling" xml:id="JaxWsWhiteboardErrorHandling">
            <title>Whiteboard Error Handling</title>
        
            <para>
            There are a number of error cases where the Jakarta Webservice
            whiteboard may be unable to correctly register an endpoint or use a given handler.
            All of these cases must result in a failure DTO being created with the
            appropriate error code.
            </para>
            <section>
                <title>General Error Codes</title>
                <itemizedlist>
                  <!-- generic error codes -->    
                  <listitem>
                    <para>
                    <emphasis>Unknown Failure</emphasis> - Outside of the predefined error conditions there might still errors occurring during the construction of the objects,
                    the implementation can use the error code <code><xref linkend="org.osgi.service.webservice.runtime.dto.FailedDTO.FAILURE_REASON_UNKNOWN" xrefstyle="hyperlink"/></code> to indicate that.
                    The implementation can use own error codes but to prevent clash with codes specified in later specification versions, such an error code must
                    be equal or larger than <code>1000</code>.
                    In all cases an additional error message might be used to further describe the nature of the failure and give users of the DTO a hint what's going on.
                    </para>
                  </listitem>
                  <listitem>
                    <para><emphasis>Failure to obtain a service instance</emphasis> - In
                    the case where a published service is unable to be obtained by the
                    Jakarta Webservice whiteboard then the service is deny
                    listed by the container. A failure DTO is made available from the
                    WebserviceServiceRuntime representing the deny listed service
                    object. The error code in this case is <code><xref linkend="org.osgi.service.webservice.runtime.dto.FailedDTO.FAILURE_REASON_SERVICE_NOT_GETTABLE" xrefstyle="hyperlink"/></code>.</para>
                  </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Handler Error Codes</title>
                <itemizedlist>
                  <listitem>
                    <para><emphasis>No matching endpoints</emphasis> - If a handler is currently not matching any endpoint implementor it is considered failed as it can't
                    perform its work. The error code in this case is <code><xref linkend="org.osgi.service.webservice.runtime.dto.FailedHandlerDTO.FAILURE_REASON_NO_MATCHING_ENDPOINT" xrefstyle="hyperlink"/></code>.
                    </para>
                  </listitem>
                   <listitem>
                    <para><emphasis>Invalid filter</emphasis> - If a handler is specify an invalid filter it is considered failed as it can't be decided if a handler matches or not.
                    The error code in this case is <code><xref linkend="org.osgi.service.webservice.runtime.dto.FailedHandlerDTO.FAILURE_REASON_INVALID_FILTER" xrefstyle="hyperlink"/></code> and the message should include the parsing error.
                    </para>
                  </listitem>
                </itemizedlist>
            </section>
             <section>
                <title>Endpoint Implementor Error Codes</title>
                <itemizedlist>
                  <listitem>
                    <para><emphasis>Endpoint creation failed</emphasis> - an implementation needs to transform the implementor into an Webservice Endpoint, this endpoint can then be further published
                    with the jakarta xml webservices api. If this transformation fails, then the Endpoint is considered failed as no futher handling is possible.
                    The error code in this case is <code><xref linkend="org.osgi.service.webservice.runtime.dto.FailedEndpointDTO.FAILURE_REASON_CREATE_FAILED" xrefstyle="hyperlink"/></code>.
                    </para>
                  </listitem>
                  <listitem>
                    <para><emphasis>Setting handlers not supported</emphasis> - if there are any matching handler but setting Handlers for the created Webservice Endpoint is not supported
                    then the Endpoint is considered failed.
                    The error code in this case is <code><xref linkend="org.osgi.service.webservice.runtime.dto.FailedEndpointDTO.FAILURE_REASON_SET_HANDLER_NOT_SUPPORTED" xrefstyle="hyperlink"/></code>.
                    </para>
                  </listitem>
                     <listitem>
                    <para><emphasis>Setting handlers failed</emphasis> - if there are any matching handler but using them for the created Webservice Endpoint for example they are incompatible
                    then the Endpoint is considered failed.
                    The error code in this case is <code><xref linkend="org.osgi.service.webservice.runtime.dto.FailedEndpointDTO.FAILURE_REASON_SET_HANDLER_FAILED" xrefstyle="hyperlink"/></code>.
                    </para>
                  </listitem>
                  <listitem>
                    <para><emphasis>Publishing failed</emphasis> - after creation and setup of handlers an Endpoint is finally published with a transport, if this fails
                    then the Endpoint is considered failed.
                    The error code in this case is <code><xref linkend="org.osgi.service.webservice.runtime.dto.FailedEndpointDTO.FAILURE_REASON_PUBLISH_FAILED" xrefstyle="hyperlink"/></code>
                    </para>
                  </listitem>
                </itemizedlist>
            </section>
          </section>
                
  <section>
    <title>Capabilities</title>

    <section>
      <title>osgi.implementation Capability</title>

      <para>The Jakarta™ XML Web Services Whiteboard Implementation bundle must provide the <link
      linkend="service.namespaces-osgi.implementation.namespace"><code>osgi.implementation</code></link>
      capability with the name <xref
      linkend="org.osgi.service.webservice.whiteboard.WebserviceWhiteboardConstants.WEBSERVICE_IMPLEMENTATION"
      xrefstyle="hyperlink"/>. This capability can be used by provisioning
      tools and during resolution to ensure that a Web Services Whiteboard implementation
      is present. The capability must also declare a uses constraint for the
      <code>org.osgi.service.webservice</code> package and provide the version
      of this specification:</para>

      <programlisting>Provide-Capability: osgi.implementation;
 osgi.implementation=osgi.webservice";
 uses:="org.osgi.service.webservice.runtime,org.osgi.service.webservice.runtime.dto,jakarta.xml.ws.handler,jakarta.xml.ws,org.osgi.dto,org.osgi.framework.dto";
 version:Version="<xref endterm="org.osgi.service.webservice-version.number"
          linkend="org.osgi.service.webservice"/>"</programlisting>

      <para>The <xref
      linkend="org.osgi.service.webservice.whiteboard.annotations.RequireWebserviceWhiteboard"
      xrefstyle="hyperlink"/> annotation can be used to require this
      capability.</para>

      <para>This capability must follow the rules defined for the <xref
      linkend="service.namespaces-osgi.implementation.namespace"/>.</para>
    </section>

    <section>
      <title>osgi.service Capability</title>

      <para>The bundle providing the Jakarta™ XML Web Services Whiteboard service must provide
      capabilities in the <link
      linkend="service.namespaces-osgi.service.namespace"><code>osgi.service</code></link>
      namespace representing the Runtime Service it is required to register. This
      capability must also declare uses constraints for the relevant service
      packages:</para>

      <programlisting>Provide-Capability: osgi.service;
 objectClass:List&lt;String&gt;="org.osgi.service.webservice.runtime.WebserviceServiceRuntime";
 uses:="org.osgi.service.webservice.runtime,org.osgi.service.webservice.runtime.dto,jakarta.xml.ws.handler,jakarta.xml.ws,org.osgi.dto,org.osgi.framework.dto"</programlisting>

      <para>This capability must follow the rules defined for the <xref
      linkend="service.namespaces-osgi.service.namespace"/>.</para>
    </section>
  </section>
  
  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.webservice.runtime.xml"/>
  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.webservice.runtime.dto.xml"/>
  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.webservice.whiteboard.xml"/>
  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.webservice.whiteboard.annotations.xml"/>
  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.webservice.whiteboard.propertytypes.xml"/>
  
  <section>
    <title>References</title>


    <bibliolist>
      <bibliomixed xml:id="service.jakartaws-i21217577">
        <title>Jakarta™ XML Web Services Specification</title>

        <biblioid class="uri">
          <link xlink:href="https://jakarta.ee/specifications/xml-web-services/4.0/jakarta-xml-ws-spec-4.0.html"/>
        </biblioid>
      </bibliomixed>
      
      <bibliomixed xml:id="service.jakartaws-handler">
        <title>Handler</title>

        <biblioid class="uri">
          <link xlink:href="https://jakarta.ee/specifications/xml-web-services/4.0/apidocs/jakarta.xml.ws/jakarta/xml/ws/handler/handler"/>
        </biblioid>
      </bibliomixed>
      
      <bibliomixed xml:id="service.jakartaws-endpoint">
        <title>Endpoint</title>

        <biblioid class="uri">
          <link xlink:href="https://jakarta.ee/specifications/xml-web-services/4.0/apidocs/jakarta.xml.ws/jakarta/xml/ws/endpoint"/>
        </biblioid>
      </bibliomixed>
      
      

      <bibliomixed xml:id="service.jakartaws-portable.java.contracts.ref">
        <title>Portable Java Contract Definitions</title>

        <biblioid class="uri">
          <link xlink:href="https://docs.osgi.org/reference/portable-java-contracts.html"/>
        </biblioid>
      </bibliomixed>

      <bibliomixed xml:id="service.jakartaws-whiteboard.pattern.ref">
        <title>Whiteboard Pattern</title>

        <biblioid class="uri">
          <link xlink:href="https://docs.osgi.org/whitepaper/whiteboard-pattern/"/>
        </biblioid>
      </bibliomixed>

      <bibliomixed xml:id="service.jakartaws-iana.media.types">
        <title>IANA Media Type Registrations</title>

        <biblioid class="uri">
          <link xlink:href="https://www.iana.org/assignments/media-types/media-types.xhtml"/>
        </biblioid>
      </bibliomixed>

      <bibliomixed xml:id="service.jakartaws-iana.media.type.suffixes">
        <title>IANA Media Type Suffix Registrations</title>

        <biblioid class="uri">
          <link xlink:href="https://www.iana.org/assignments/media-type-structured-suffix/media-type-structured-suffix.xhtml"/>
        </biblioid>
      </bibliomixed>

    </bibliolist>
  </section>
</section>
</chapter>
