/*
 * Copyright (c) Contributors to the Eclipse Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0 
 */

/*
 * osgi.specs Gradle build script
 */
import org.apache.tools.ant.filters.ReplaceTokens

interface Injected {
	@Inject ExecOperations getExec()
	@Inject FileSystemOperations getFs()
}

version = bnd.get("osgi.version")

def licensed = bnd.get("licensed")
def saxon = bnd.get("saxon")
ext.fop_home = file("${licensed}/fop")
ext.fop_classpath = files(fileTree("dir": new File(fop_home, "lib"), "include": "*.jar"),
fileTree("dir": new File(fop_home, "build"), "includes": ["fop.jar", "fop-hyph.jar"]))

def javadoc = tasks.named("javadoc") {
	description = "Build the docbook flavored javadoc."
	group = "documentation"

	/*
	 * Our doclet is based upon the pre-Java 9 doclet api
	 */
	javadocTool = javaToolchains.javadocToolFor {
		languageVersion = JavaLanguageVersion.of(8)
	}

	def destinationDirectory = objects.directoryProperty().convention(layout.getBuildDirectory().dir("javadoc"))
	destinationDir = file(destinationDirectory)
	def javadocxml = destinationDirectory.file("javadoc.xml")
	def docbookDir = destinationDirectory.dir("docbook")
	def stylesheet = file("docbook/xsl/javadoc2docbook.xsl")
	classpath = sourceSets.main.compileClasspath
	source = bnd.allSrcDirs
	bnd.get("javadoc.specs").split(/\s*,\s*/).each {
		include it.replace((char)'.',(char)'/')+"/**/*.java"
	}
	title = ""
	options.memberLevel = JavadocMemberLevel.PROTECTED
	options.encoding = "UTF-8"
	options.noTimestamp = false
	options.doclet = "org.osgi.tools.xmldoclet.XmlDoclet"
	options.docletpath = sourceSets.main.output.files as List

	inputs.files(sourceSets.main.output).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("docletpath")
	inputs.file(stylesheet).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("stylesheet")

	doLast("xslt") { t ->
		def javadocxmlFile = javadocxml.get().getAsFile()
		def docbookDirFile = docbookDir.get().getAsFile()
		ant.xslt("style": stylesheet,
		"in": javadocxmlFile,
		"out": new File(temporaryDir, "javadoc.txt"),
		"force": true) {
			classpath("location": saxon)
			factory("name": "com.icl.saxon.TransformerFactoryImpl")
			param("name": "destdir", "expression": docbookDirFile)
			param("name": "ddf.only", "expression": "0")
		}
		ant.xslt("style": stylesheet,
		"in": javadocxmlFile,
		"out": new File(temporaryDir, "ddf.txt"),
		"force": true) {
			classpath("location": saxon)
			factory("name": "com.icl.saxon.TransformerFactoryImpl")
			param("name": "destdir", "expression": docbookDirFile)
			param("name": "ddf.only", "expression": "1")
		}
	}
}

def rdmtsummary = tasks.register("rdmtsummary") {
	description = "Build the docbook flavored Residential DMT summary."
	group = "documentation"

	def runtimeClasspath = sourceSets.main.runtimeClasspath
	def treesummaryxml = layout.getBuildDirectory().file("residentialdmt/treesummary.xml")

	inputs.files(parent.project("dmforest").sourceSets.main.allJava).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("dmforest")
	inputs.files(runtimeClasspath).withNormalizer(ClasspathNormalizer.class).withPropertyName("runtimeClasspath")
	outputs.file(treesummaryxml).withPropertyName("treesummaryxml")

	def injected = objects.newInstance(Injected)
	doLast("rdmtsummary") { t ->
		treesummaryxml.get().getAsFile().withOutputStream { os ->
			injected.exec.javaexec {
				classpath(runtimeClasspath)
				mainClass = "org.osgi.tools.dmt.TreeSummary"
				standardOutput = new BufferedOutputStream(os)
				args("org.osgi.dmt.residential.\$")
			}.assertNormalExitValue()
		}
	}
}

def xmlns = tasks.register("xmlns", Copy.class) {
	description = "Build the docbook flavored schemas."
	group = "documentation"

	from(parent.file("xmlns"))
	into(layout.getBuildDirectory().dir("xmlns"))
	include("**/*.xsd")
	includeEmptyDirs = false

	doLast("strip-comments") { t ->
		ant.replaceregexp("match": /.*(<(\w+:)?schema)/,
		"replace": /\1/,
		"flags": "s",
		"encoding": "UTF-8") {
			fileset("dir": destinationDir, "includes": "**/*.xsd")
		}
	}
}

def specifications = tasks.register("specifications") {
	description = "Generates all the specifications."
	group = "documentation"
}
defaultTasks += absoluteProjectPath(specifications.name)

def books = ["core", "cmpn"]

books.forEach { book ->
	def booktask = tasks.register("${book}.xml") {
		description = "Generate the docbook xml file for the book ${book}."
		group = "documentation"

		ext.bookxml = layout.getBuildDirectory().file("book/${name}")
		def watermark = bnd.get("${book}.draft", "no")
		ext.draftmode = objects.property(String.class).convention((watermark != "no") ? "yes" : "no")
		def stylesheet = file("docbook/xsl/custom-profile.xsl")
		def xmlFiles = objects.fileTree().from("docbook").include("**/*.xml")
		def copyrightyear = "2000, ${bnd.get('copyright.year')}"
		def runtimeClasspath = sourceSets.main.runtimeClasspath
		def docbookxsd = file("${licensed}/docbook-xsd/docbook.xsd")

		inputs.file(stylesheet).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("stylesheet")
		inputs.files(xmlFiles).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("xmlFiles")
		inputs.files(runtimeClasspath).withNormalizer(ClasspathNormalizer.class).withPropertyName("runtimeClasspath")
		inputs.files(javadoc).withPropertyName(javadoc.name)
		inputs.files(xmlns).withPropertyName(xmlns.name)
		if (book != "core") {
			inputs.files(rdmtsummary).withPropertyName(rdmtsummary.name)
		}
		inputs.property("draft.mode", draftmode)
		inputs.property("copyright.year", copyrightyear)
		inputs.file(docbookxsd).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("docbookxsd")
		outputs.file(bookxml).withPropertyName("bookxml")

		def injected = objects.newInstance(Injected)
		doLast("xml") { t ->
			def bookxmlFile = bookxml.get().getAsFile()
			ant.xslt("style": stylesheet,
			"in": "docbook/${book}/book.xml",
			"out": bookxmlFile,
			"force": true) {
				sysproperty("key": "org.apache.xerces.xni.parser.XMLParserConfiguration",
				"value": "org.apache.xerces.parsers.XIncludeParserConfiguration")
				classpath {
					fileset("dir": "${fop_home}/lib") {
						include("name": "xercesImpl*.jar")
						include("name": "xml-apis*.jar")
					}
					pathelement("location": saxon)
				}
				factory("name": "com.icl.saxon.TransformerFactoryImpl")
				param("name": "draft.mode", "expression": draftmode.get())
				param("name": "copyright.year", "expression": copyrightyear)
			}
			injected.exec.javaexec {
				classpath(runtimeClasspath)
				mainClass = "org.osgi.tools.xmlvalidation.XmlValidator"
				args(docbookxsd)
				args(bookxmlFile)
			}.assertNormalExitValue()
		}
	}

	def bookdifftask = tasks.register("${book}-diff.xml") {
		description = "Generate the docbook diff xml file for the book ${book}."
		group = "documentation"

		ext.bookxml = layout.getBuildDirectory().file("book/${name}")
		def watermark = bnd.get("${book}.draft", "no")
		ext.draftmode = objects.property(String.class).convention((watermark != "no") ? "yes" : "no")
		def stylesheet = file("${licensed}/diffmk/style/docbook.xsl")
		def baselinexml = file("baseline/${book}.xml")
		def booktaskXml = booktask.flatMap({it.bookxml})

		inputs.files(booktask).withPropertyName(booktask.name)
		inputs.file(stylesheet).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("stylesheet")
		inputs.file(baselinexml).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("baselinexml")
		outputs.file(bookxml).withPropertyName("bookxml")

		def injected = objects.newInstance(Injected)
		doLast("xml-diff") { t ->
			def tmpxml = new File(temporaryDir, "diff.xml")
			injected.exec.javaexec {
				classpath("${licensed}/diffmk/bin/diffmk.jar")
				mainClass = "net.sf.diffmk.DiffMk"
				minHeapSize = "1g"
				maxHeapSize = "2g"
				args("--verbose")
				args("1")
				args("--words")
				args(baselinexml)
				args(booktaskXml.get().getAsFile())
				args(tmpxml)
			}.assertNormalExitValue()
			ant.xslt("style": stylesheet,
			"in": tmpxml,
			"out": bookxml.get().getAsFile(),
			"force": true) {
				classpath("location": saxon)
				factory("name": "com.icl.saxon.TransformerFactoryImpl")
			}
		}
	}

	def fotask = tasks.register("${book}.fo", fotaskConfiguration(book, booktask))
	def fodifftask = tasks.register("${book}-diff.fo", fotaskConfiguration("${book}-diff", bookdifftask))

	def pdftask = tasks.register("${book}.pdf", pdftaskConfiguration(book, book, fotask))
	tasks.register("${book}-diff.pdf", pdftaskConfiguration(book, "${book}-diff", fodifftask))

	def rasterizelisttask = tasks.register("${book}.rasterizelist") {
		description = "Generate list of SVGs to rasterize for the book ${book}."
		group = "documentation"

		def imagesXSL = file("docbook/xsl/custom-html-images.xsl")
		ext.imagesFile = layout.getBuildDirectory().file("images/${book}.txt")
		def watermark = bnd.get("${book}.draft", "no")
		def booktaskXml = booktask.flatMap({it.bookxml})
		def booktaskDraftmode = booktask.flatMap({it.draftmode})

		inputs.files(booktask).withPropertyName(booktask.name)
		inputs.file(imagesXSL).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("imagesXSL")
		inputs.property("watermark", watermark)
		outputs.file(imagesFile).withPropertyName("imagesFile")

		doLast("xslt") { t ->
			ant.xslt("style": imagesXSL,
			"in": booktaskXml.get().getAsFile(),
			"out": imagesFile.get().getAsFile(),
			"force": true) {
				classpath("location": saxon)
				factory("name": "com.icl.saxon.TransformerFactoryImpl")
				param("name": "draft.mode", "expression": booktaskDraftmode.get())
				if (booktaskDraftmode.get() != "no") {
					param("name": "draft.watermark.image", "expression": "../graphics/${watermark}.svg")
				}
			}
		}
	}

	def rasterizetask = tasks.register("${book}.rasterize") {
		description = "Rasterize SVGs for the book ${book}."
		group = "documentation"

		def svgFiles = objects.fileTree().from("docbook").include("**/*.svg")
		def bookFolder = layout.getProjectDirectory().dir("docbook/${book}")
		def imagesFile = rasterizelisttask.flatMap({it.imagesFile}).map({it.getAsFile()})
		def imageFiles = objects.fileCollection().from(imagesFile.map({f -> f.collect({bookFolder.file(it)})}))
		def runtimeClasspath = sourceSets.main.runtimeClasspath
		def destinationDirectory = layout.getBuildDirectory().dir("images/${book}")
		def fontbasedir = file("fonts")

		inputs.files(rasterizelisttask).withPropertyName(rasterizelisttask.name)
		inputs.files(svgFiles).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("svgFiles")
		inputs.files(runtimeClasspath).withNormalizer(ClasspathNormalizer.class).withPropertyName("runtimeClasspath")
		outputs.dir(destinationDirectory).withPropertyName("destinationDirectory")

		def injected = objects.newInstance(Injected)
		def outputFiles = objects.fileTree().from(destinationDirectory)
		doFirst("clean") { t ->
			injected.fs.delete {
				delete(outputFiles)
			}
		}
		doLast("exec") { t ->
			injected.exec.javaexec {
				systemProperty("scale", "2")
				systemProperty("dpi", "300")
				systemProperty("JAVA_FONTS", fontbasedir)
				classpath(runtimeClasspath)
				mainClass = "org.osgi.tools.rasterizer.RasterizerMain"
				minHeapSize = "1g"
				maxHeapSize = "2g"
				args(destinationDirectory.get().getAsFile())
				args(imageFiles.getFiles())
			}.assertNormalExitValue()
		}
	}

	def htmltask = tasks.register("${book}.html") {
		description = "Generate the docbook html files for the book ${book}."
		group = "documentation"

		def stylesheet = file("docbook/xsl/custom-html.xsl")
		def commonXSL = file("docbook/xsl/custom-html-common.xsl")
		def htmlResources = file("docbook/xsl/html-resources")
		def licensedResources = file("${licensed}/webresources")
		def watermark = bnd.get("${book}.draft", "no")
		def release_version = bnd.get("osgi.release")
		def destinationDirectory = layout.getBuildDirectory().dir("html/${book}")
		def booktaskXml = booktask.flatMap({it.bookxml})
		def booktaskDraftmode = booktask.flatMap({it.draftmode})

		inputs.files(booktask).withPropertyName(booktask.name)
		inputs.files(rasterizetask).withPropertyName(rasterizetask.name)
		inputs.file(stylesheet).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("stylesheet")
		inputs.file(commonXSL).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("commonXSL")
		inputs.dir(htmlResources).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("htmlResources")
		inputs.dir(licensedResources).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("licensedResources")
		inputs.property("watermark", watermark)
		inputs.property("release_version", release_version)
		outputs.dir(destinationDirectory).withPropertyName("destinationDirectory")

		def injected = objects.newInstance(Injected)
		def outputFiles = objects.fileTree().from(destinationDirectory)
		doFirst("clean") { t ->
			injected.fs.delete {
				delete(outputFiles)
			}
		}
		doLast("xslt") { t ->
			ant.xslt("style": stylesheet,
			"in": booktaskXml.get().getAsFile(),
			"out": new File(temporaryDir, "book.txt"),
			"force": true) {
				classpath("location": saxon)
				factory("name": "com.icl.saxon.TransformerFactoryImpl")
				param("name": "draft.mode", "expression": booktaskDraftmode.get())
				if (booktaskDraftmode.get() != "no") {
					param("name": "draft.watermark.image", "expression": "images/${watermark}.png")
				}
				param("name": "webhelp.base.dir", "expression": destinationDirectory.get().getAsFile())
				param("name": "webhelp.default.topic", "expression": "index.html")
				param("name": "release.version", "expression": release_version)
			}

			injected.fs.copy {
				into(destinationDirectory)
				from(htmlResources)
				from(licensedResources) {
					include("**/*.js")
					into("js")
					eachFile { fcd ->
						fcd.path = "js/${fcd.name}"
					}
				}
				from(licensedResources) {
					include("**/*.css")
					into("css")
					eachFile { fcd ->
						fcd.path = "css/${fcd.name}"
					}
				}
				from(rasterizetask) {
					into("images")
				}
				includeEmptyDirs = false
			}
		}
	}

	def ziptask = tasks.register("${book}.zip", Zip.class) {
		description = "Generate a ZIP archive of the docbook html for the book ${book}."
		group = "documentation"

		destinationDirectory = layout.getBuildDirectory()
		archiveBaseName = "osgi.${book}"
		archiveClassifier = "html"
		from(htmltask)
	}

	specifications.configure {
		dependsOn(pdftask, ziptask)
	}
}

private Closure fotaskConfiguration(bookName, xmltask) {
	return {
		description = "Generate the docbook fo file for the book ${bookName}."
		group = "documentation"

		ext.bookfo = layout.getBuildDirectory().file("fo/${name}")
		def stylesheet = file("docbook/xsl/custom-fo.xsl")
		def watermark = bnd.get("${bookName}.draft", "no")
		def booktaskXml = xmltask.flatMap({it.bookxml})
		def booktaskDraftmode = xmltask.flatMap({it.draftmode})

		inputs.files(xmltask).withPropertyName(xmltask.name)
		inputs.file(stylesheet).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("stylesheet")
		inputs.property("watermark", watermark)
		outputs.file(bookfo).withPropertyName("bookfo")

		doLast("xslt") { t ->
			ant.xslt("style": stylesheet,
			"in": booktaskXml.get().getAsFile(),
			"out": bookfo.get().getAsFile(),
			"force": true) {
				classpath("location": bnd.get("saxon"))
				factory("name": "com.icl.saxon.TransformerFactoryImpl")
				param("name": "draft.mode", "expression": booktaskDraftmode.get())
				if (booktaskDraftmode.get() != "no") {
					param("name": "draft.watermark.image", "expression": "docbook/graphics/${watermark}.svg")
				}
			}
		}
	}
}

private Closure pdftaskConfiguration(basebook, bookName, fotask) {
	return {
		description = "Generate the docbook pdf file for the book ${bookName}."
		group = "documentation"

		def bookpdf = layout.getBuildDirectory().file("osgi.${bookName}-${version}.pdf")
		def fontbasedir = file("fonts")
		def basebookdir = file("docbook/${basebook}")
		def fopxconf = file("docbook/fop/fop-osgi.xconf")
		def log4jprops = file("docbook/fop/log4j.properties")
		def svgFiles = objects.fileTree().from("docbook").include("**/*.svg")
		def booktaskFo = fotask.flatMap({it.bookfo})
		def classesDirectory = sourceSets.main.java.classesDirectory

		inputs.files(fotask).withPropertyName(fotask.name)
		inputs.file(fopxconf).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("fopxconf")
		inputs.file(log4jprops).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("log4jprops")
		inputs.dir(fontbasedir).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("fontbasedir")
		inputs.files(svgFiles).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("svgFiles")
		outputs.file(bookpdf).withPropertyName("bookpdf")

		def injected = objects.newInstance(Injected)
		doLast("exec") { t ->
			injected.fs.copy {
				from(fopxconf)
				into(temporaryDir)
				filter(ReplaceTokens,
				"tokens": ["book.base.url": basebookdir.toURI().toString(),
					"font.base.url": fontbasedir.toURI().toString(),
					"font.base.dir": fontbasedir.absolutePath])
			}
			injected.exec.javaexec {
				systemProperty("java.awt.headless", "true")
				systemProperty("JAVA_FONTS", fontbasedir)
				systemProperty("log4j.configuration", log4jprops.toURI())
				classpath(classesDirectory.get().getAsFile())
				classpath(bnd.get("log4j"))
				classpath(fop_classpath)
				mainClass = "org.osgi.tools.fop.FOPMain"
				minHeapSize = "1g"
				maxHeapSize = "3g"
				args("-c", new File(temporaryDir, fopxconf.name))
				args("-fo", booktaskFo.get().getAsFile())
				args("-pdf", bookpdf.get().getAsFile())
			}.assertNormalExitValue()
		}
	}
}

tasks.register("fontmetrics") {
	description = "Build the font metrics."
	group = "documentation"

	def tffs = objects.fileTree().from("fonts").include("*.ttf")
	def xmls = objects.fileCollection().from(tffs.getElements().map({ set ->
		set.collect { it.getAsFile().getAbsolutePath().replaceAll(/\.ttf$/, /.xml/) }
	}))

	inputs.files(tffs).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("tffs")
	outputs.files(xmls).withPropertyName("xmls")

	def injected = objects.newInstance(Injected)
	doLast("exec") { t ->
		tffs.forEach { ttf ->
			injected.exec.javaexec {
				classpath(fop_classpath)
				mainClass = "org.apache.fop.fonts.apps.TTFReader"
				args(ttf.getAbsolutePath())
				args(ttf.getAbsolutePath().replaceAll(/\.ttf$/, /.xml/))
			}.assertNormalExitValue()
		}
	}
}
